[
  {
    "category": "Parameters",
    "desc": "Scripts can have parameters defined in the level XML file. These serve as input to a specific instance of the script and can be used to configure various options and parameters of the script. While these parameters can be read at any time in the script, it's recommended to copy them to a global variable in or outside the init function.",
    "functions": [
      {
        "name": "GetIntParam",
        "def": "value = GetIntParam(name, default)",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "optional": false,
            "desc": "Parameter name"
          },
          {
            "name": "default",
            "type": "number",
            "optional": false,
            "desc": "Default parameter value"
          }
        ],
        "return": [
          {
            "name": "value",
            "type": "number",
            "optional": false,
            "desc": "Parameter value"
          }
        ],
        "info": "No Description",
        "example": "--Retrieve blinkcount parameter, or set to 5 if omitted\nparameterBlinkCount = GetIntParameter(\"blinkcount\", 5)"
      },
      {
        "name": "GetFloatParam",
        "def": "value = GetFloatParam(name, default)",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "optional": false,
            "desc": "Parameter name"
          },
          {
            "name": "default",
            "type": "number",
            "optional": false,
            "desc": "Default parameter value"
          }
        ],
        "return": [
          {
            "name": "value",
            "type": "number",
            "optional": false,
            "desc": "Parameter value"
          }
        ],
        "info": "No Description",
        "example": "--Retrieve speed parameter, or set to 10.0 if omitted\nparameterSpeed = GetFloatParameter(\"speed\", 10.0)"
      },
      {
        "name": "GetBoolParam",
        "def": "value = GetBoolParam(name, default)",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "optional": false,
            "desc": "Parameter name"
          },
          {
            "name": "default",
            "type": "boolean",
            "optional": false,
            "desc": "Default parameter value"
          }
        ],
        "return": [
          {
            "name": "value",
            "type": "boolean",
            "optional": false,
            "desc": "Parameter value"
          }
        ],
        "info": "No Description",
        "example": "--Retrieve playsound parameter, or false if omitted\nparameterPlaySound = GetBoolParameter(\"playsound\", false)"
      },
      {
        "name": "GetStringParam",
        "def": "value = GetStringParam(name, default)",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "optional": false,
            "desc": "Parameter name"
          },
          {
            "name": "default",
            "type": "string",
            "optional": false,
            "desc": "Default parameter value"
          }
        ],
        "return": [
          {
            "name": "value",
            "type": "string",
            "optional": false,
            "desc": "Parameter value"
          }
        ],
        "info": "No Description",
        "example": "--Retrieve mode parameter, or \"idle\" if omitted\nparameterMode = GetSrtingParameter(\"mode\", \"idle\")"
      }
    ]
  },
  {
    "category": "Script control",
    "desc": "General functions that control the operation and flow of the script.",
    "functions": [
      {
        "name": "GetVersion",
        "def": "version = GetVersion()",
        "arguments": [],
        "return": [
          {
            "name": "version",
            "type": "string",
            "optional": false,
            "desc": "Dot separated string of current version of the game"
          }
        ],
        "info": "No Description",
        "example": "local v = GetVersion()\n--v is \"0.5.0\""
      },
      {
        "name": "HasVersion",
        "def": "match = HasVersion(version)",
        "arguments": [
          {
            "name": "version",
            "type": "string",
            "optional": false,
            "desc": "Reference version"
          }
        ],
        "return": [
          {
            "name": "match",
            "type": "boolean",
            "optional": false,
            "desc": "True if current version is at least provided one"
          }
        ],
        "info": "No Description",
        "example": "if HasVersion(\"0.6.0\") then\n\t--conditional code that only works on 0.6.0 or above\nelse\n\t--legacy code that works on earlier versions\nend"
      },
      {
        "name": "GetTime",
        "def": "time = GetTime()",
        "arguments": [],
        "return": [
          {
            "name": "time",
            "type": "number",
            "optional": false,
            "desc": "The time in seconds since level was started"
          }
        ],
        "info": "Returns running time of this script. If called from update, this returns\nthe simulated time, otherwise it returns wall time.",
        "example": "local t = GetTime()"
      },
      {
        "name": "GetTimeStep",
        "def": "dt = GetTimeStep()",
        "arguments": [],
        "return": [
          {
            "name": "dt",
            "type": "number",
            "optional": false,
            "desc": "The timestep in seconds"
          }
        ],
        "info": "Returns timestep of the last frame. If called from update, this returns\nthe simulation time step, which is always one 60th of a second (0.0166667).\nIf called from tick or draw it returns the actual time since last frame.",
        "example": "local dt = GetTimeStep()"
      },
      {
        "name": "InputPressed",
        "def": "pressed = InputPressed(input)",
        "arguments": [
          {
            "name": "input",
            "type": "string",
            "optional": false,
            "desc": "The input identifier"
          }
        ],
        "return": [
          {
            "name": "pressed",
            "type": "boolean",
            "optional": false,
            "desc": "True if input was pressed during last frame"
          }
        ],
        "info": "No Description",
        "example": "if InputPressed(\"interact\") then\n\t...\nend"
      },
      {
        "name": "InputReleased",
        "def": "pressed = InputReleased(input)",
        "arguments": [
          {
            "name": "input",
            "type": "string",
            "optional": false,
            "desc": "The input identifier"
          }
        ],
        "return": [
          {
            "name": "pressed",
            "type": "boolean",
            "optional": false,
            "desc": "True if input was released during last frame"
          }
        ],
        "info": "No Description",
        "example": "if InputReleased(\"interact\") then\n\t...\nend"
      },
      {
        "name": "InputDown",
        "def": "pressed = InputDown(input)",
        "arguments": [
          {
            "name": "input",
            "type": "string",
            "optional": false,
            "desc": "The input identifier"
          }
        ],
        "return": [
          {
            "name": "pressed",
            "type": "boolean",
            "optional": false,
            "desc": "True if input is currently held down"
          }
        ],
        "info": "No Description",
        "example": "if InputDown(\"interact\") then\n...\nend"
      },
      {
        "name": "InputValue",
        "def": "value = InputValue(input)",
        "arguments": [
          {
            "name": "input",
            "type": "string",
            "optional": false,
            "desc": "The input identifier"
          }
        ],
        "return": [
          {
            "name": "value",
            "type": "number",
            "optional": false,
            "desc": "Depends on input type"
          }
        ],
        "info": "No Description",
        "example": "scrollPos = scrollPos + InputValue(\"mousewheel\")"
      },
      {
        "name": "SetValue",
        "def": "SetValue(variable, value, [transition], [time])",
        "arguments": [
          {
            "name": "variable",
            "type": "string",
            "optional": false,
            "desc": "Name of number variable in the global context"
          },
          {
            "name": "value",
            "type": "number",
            "optional": false,
            "desc": "The new value"
          },
          {
            "name": "transition",
            "type": "string",
            "optional": true,
            "desc": "Transition type. See description."
          },
          {
            "name": "time",
            "type": "number",
            "optional": true,
            "desc": "Transition time (seconds)"
          }
        ],
        "return": [],
        "info": "Set value of a number variable in the global context with an optional transition.\nIf a transition is provided the value will animate from current value to the new value during the transition time.\nTransition can be one of the following:\n\nTransition  Description\nlinear\t Linear transitioncosine\t Slow at beginning and endeasein\t Slow at beginningeaseout\t Slow at endbounce\t Bounce and overshoot new value",
        "example": "myValue = 0\nSetValue(\"myValue\", 1, \"linear\", 0.5)\n\nThis will change the value of myValue from 0 to 1 in a linear fasion over 0.5 seconds"
      },
      {
        "name": "StartLevel",
        "def": "StartLevel(mission, path, [layers])",
        "arguments": [
          {
            "name": "mission",
            "type": "string",
            "optional": false,
            "desc": "An identifier of your choice"
          },
          {
            "name": "path",
            "type": "string",
            "optional": false,
            "desc": "Path to level XML file"
          },
          {
            "name": "layers",
            "type": "string",
            "optional": true,
            "desc": "Active layers. Default is no layers."
          }
        ],
        "return": [],
        "info": "Start a level",
        "example": "--Start level with no active layers\nStartLevel(\"level1\", \"MOD/level1.xml\")\n\n--Start level with two layers\nStartLevel(\"level1\", \"MOD/level1.xml\", \"vehicles targets\")"
      },
      {
        "name": "SetPaused",
        "def": "SetPaused(paused)",
        "arguments": [
          {
            "name": "paused",
            "type": "boolean",
            "optional": false,
            "desc": "True if game should be paused"
          }
        ],
        "return": [],
        "info": "Set paused state of the game",
        "example": "--Pause game and bring up pause menu on HUD\nSetPaused(true)"
      },
      {
        "name": "Restart",
        "def": "Restart()",
        "arguments": [],
        "return": [],
        "info": "Restart level",
        "example": "if shouldRestart then\nRestart()\nend"
      },
      {
        "name": "Menu",
        "def": "Menu()",
        "arguments": [],
        "return": [],
        "info": "Go to main menu",
        "example": "if shouldExitLevel then\nMenu()\nend"
      }
    ]
  },
  {
    "category": "Registry",
    "desc": "The Teardown engine uses a global key/value-pair registry that scripts can read and write. The engine exposes a lot of internal information through the registry, but it can also be used as way for scripts to communicate with each other.\nThe registry is a hierarchical node structure and can store a value in each node (parent nodes can also have a value). The values can be of type floating point number, integer, boolean or string, but all types are automatically converted if another type is requested. Some registry nodes are reserved and used for special purposes.",
    "functions": [
      {
        "name": "ClearKey",
        "def": "ClearKey(key)",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "optional": false,
            "desc": "Registry key to clear"
          }
        ],
        "return": [],
        "info": "Remove registry node, including all child nodes.",
        "example": "--If the registry looks like this:\n--\tscore\n--\t\tlevels\n--\t\t\tlevel1 = 5\n--\t\t\tlevel2 = 4\n\nClearKey(\"score.levels\")\n\n--Afterwards, the registry will look like this:\n--\tscore"
      },
      {
        "name": "ListKeys",
        "def": "children = ListKeys(parent)",
        "arguments": [
          {
            "name": "parent",
            "type": "string",
            "optional": false,
            "desc": "The parent registry key"
          }
        ],
        "return": [
          {
            "name": "children",
            "type": "table",
            "optional": false,
            "desc": "Indexed table of strings with child keys"
          }
        ],
        "info": "List all child keys of a registry node.",
        "example": "--If the registry looks like this:\n--\tscore\n--\t\tlevels\n--\t\t\tlevel1 = 5\n--\t\t\tlevel2 = 4\n\nlocal list = ListKeys(\"score.levels\")\nfor i=1, #list do\n\tprint(list[i])\nend\n\n--This will output:\n--level1\n--level2"
      },
      {
        "name": "HasKey",
        "def": "exists = HasKey(key)",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "optional": false,
            "desc": "Registry key"
          }
        ],
        "return": [
          {
            "name": "exists",
            "type": "boolean",
            "optional": false,
            "desc": "True if key exists"
          }
        ],
        "info": "Returns true if the registry contains a certain key",
        "example": "local foo = HasKey(\"score.levels\")"
      },
      {
        "name": "SetInt",
        "def": "SetInt(key, value)",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "optional": false,
            "desc": "Registry key"
          },
          {
            "name": "value",
            "type": "number",
            "optional": false,
            "desc": "Desired value"
          }
        ],
        "return": [],
        "info": "No Description",
        "example": "SetInt(\"score.levels.level1\", 4)"
      },
      {
        "name": "GetInt",
        "def": "value = GetInt(key)",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "optional": false,
            "desc": "Registry key"
          }
        ],
        "return": [
          {
            "name": "value",
            "type": "number",
            "optional": false,
            "desc": "Integer value of registry node or zero if not found"
          }
        ],
        "info": "No Description",
        "example": "local a = GetInt(\"score.levels.level1\")"
      },
      {
        "name": "SetFloat",
        "def": "SetFloat(key, value)",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "optional": false,
            "desc": "Registry key"
          },
          {
            "name": "value",
            "type": "number",
            "optional": false,
            "desc": "Desired value"
          }
        ],
        "return": [],
        "info": "No Description",
        "example": "SetFloat(\"level.time\", 22.3)"
      },
      {
        "name": "GetFloat",
        "def": "value = GetFloat(key)",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "optional": false,
            "desc": "Registry key"
          }
        ],
        "return": [
          {
            "name": "value",
            "type": "number",
            "optional": false,
            "desc": "Float value of registry node or zero if not found"
          }
        ],
        "info": "No Description",
        "example": "local time = GetFloat(\"level.time\")"
      },
      {
        "name": "SetBool",
        "def": "SetBool(key, value)",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "optional": false,
            "desc": "Registry key"
          },
          {
            "name": "value",
            "type": "boolean",
            "optional": false,
            "desc": "Desired value"
          }
        ],
        "return": [],
        "info": "No Description",
        "example": "SetBool(\"level.robots.enabled\", true)"
      },
      {
        "name": "GetBool",
        "def": "value = GetBool(key)",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "optional": false,
            "desc": "Registry key"
          }
        ],
        "return": [
          {
            "name": "value",
            "type": "boolean",
            "optional": false,
            "desc": "Boolean value of registry node or false if not found"
          }
        ],
        "info": "No Description",
        "example": "local isRobotsEnabled = GetBool(\"level.robots.enabled\")"
      },
      {
        "name": "SetString",
        "def": "SetString(key, value)",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "optional": false,
            "desc": "Registry key"
          },
          {
            "name": "value",
            "type": "string",
            "optional": false,
            "desc": "Desired value"
          }
        ],
        "return": [],
        "info": "No Description",
        "example": "SetBool(\"level.name\", \"foo\")"
      },
      {
        "name": "GetString",
        "def": "value = GetString(key)",
        "arguments": [
          {
            "name": "key",
            "type": "string",
            "optional": false,
            "desc": "Registry key"
          }
        ],
        "return": [
          {
            "name": "value",
            "type": "string",
            "optional": false,
            "desc": "String value of registry node or \"\" if not found"
          }
        ],
        "info": "No Description",
        "example": "local name = GetString(\"level.name\")"
      }
    ]
  },
  {
    "category": "Vector math",
    "desc": "Vector math is used in Teardown scripts to represent 3D positions, directions, rotations and transforms. The base types are vectors, quaternions and transforms. Vectors and quaternions are indexed tables with three and four components. Transforms are tables consisting of one vector (pos) and one quaternion (rot)",
    "functions": [
      {
        "name": "Vec",
        "def": "vec = Vec([x], [y], [z])",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "optional": true,
            "desc": "X value"
          },
          {
            "name": "y",
            "type": "number",
            "optional": true,
            "desc": "Y value"
          },
          {
            "name": "z",
            "type": "number",
            "optional": true,
            "desc": "Z value"
          }
        ],
        "return": [
          {
            "name": "vec",
            "type": "table",
            "optional": false,
            "desc": "New vector"
          }
        ],
        "info": "Create new vector and optionally initializes it to the provided values.\nA Vec is equivalent to a regular lua table with three numbers.",
        "example": "--These are equivalent\nlocal a1 = Vec()\nlocal a2 = {0, 0, 0}\n\n--These are equivalent\nlocal b1 = Vec(0, 1, 0)\nlocal b2 = {0, 1, 0}"
      },
      {
        "name": "VecCopy",
        "def": "new = VecCopy(org)",
        "arguments": [
          {
            "name": "org",
            "type": "table",
            "optional": false,
            "desc": "A vector"
          }
        ],
        "return": [
          {
            "name": "new",
            "type": "table",
            "optional": false,
            "desc": "Copy of org vector"
          }
        ],
        "info": "Vectors should never be assigned like regular numbers. Since they are\nimplemented with lua tables assignment means two references pointing to\nthe same data. Use this function instead.",
        "example": "--Do this to assign a vector\nlocal right1 = Vec(1, 2, 3)\nlocal right2 = VecCopy(right1)\n\n--Never do this unless you REALLY know what you're doing\nlocal wrong1 = Vec(1, 2, 3)\nlocal wrong2 = wrong1"
      },
      {
        "name": "VecLength",
        "def": "length = VecLength(vec)",
        "arguments": [
          {
            "name": "vec",
            "type": "table",
            "optional": false,
            "desc": "A vector"
          }
        ],
        "return": [
          {
            "name": "length",
            "type": "number",
            "optional": false,
            "desc": "Length (magnitude) of the vector"
          }
        ],
        "info": "No Description",
        "example": "local v = Vec(1,1,0)\nlocal l = VecLength(v)\n\n--l now equals 1.41421356"
      },
      {
        "name": "VecNormalize",
        "def": "norm = VecNormalize(vec)",
        "arguments": [
          {
            "name": "vec",
            "type": "table",
            "optional": false,
            "desc": "A vector"
          }
        ],
        "return": [
          {
            "name": "norm",
            "type": "table",
            "optional": false,
            "desc": "A vector of length 1.0"
          }
        ],
        "info": "If the input vector is of zero length, the function returns {0,0,1}",
        "example": "local v = Vec(0,3,0)\nlocal n = VecNormalize(v)\n\n--n now equals {0,1,0}"
      },
      {
        "name": "VecScale",
        "def": "norm = VecScale(vec, scale)",
        "arguments": [
          {
            "name": "vec",
            "type": "table",
            "optional": false,
            "desc": "A vector"
          },
          {
            "name": "scale",
            "type": "number",
            "optional": false,
            "desc": "A scale factor"
          }
        ],
        "return": [
          {
            "name": "norm",
            "type": "table",
            "optional": false,
            "desc": "A scaled version of input vector"
          }
        ],
        "info": "No Description",
        "example": "local v = Vec(1,2,3)\nlocal n = VecScale(v, 2)\n\n--n now equals {2,4,6}"
      },
      {
        "name": "VecAdd",
        "def": "c = VecAdd(a, b)",
        "arguments": [
          {
            "name": "a",
            "type": "table",
            "optional": false,
            "desc": "Vector"
          },
          {
            "name": "b",
            "type": "table",
            "optional": false,
            "desc": "Vector"
          }
        ],
        "return": [
          {
            "name": "c",
            "type": "table",
            "optional": false,
            "desc": "New vector with sum of a and b"
          }
        ],
        "info": "No Description",
        "example": "local a = Vec(1,2,3)\nlocal b = Vec(3,0,0)\nlocal c = VecAdd(a, b)\n\n--c now equals {4,2,3}"
      },
      {
        "name": "VecSub",
        "def": "c = VecSub(a, b)",
        "arguments": [
          {
            "name": "a",
            "type": "table",
            "optional": false,
            "desc": "Vector"
          },
          {
            "name": "b",
            "type": "table",
            "optional": false,
            "desc": "Vector"
          }
        ],
        "return": [
          {
            "name": "c",
            "type": "table",
            "optional": false,
            "desc": "New vector representing a-b"
          }
        ],
        "info": "No Description",
        "example": "local a = Vec(1,2,3)\nlocal b = Vec(3,0,0)\nlocal c = VecSub(a, b)\n\n--c now equals {-2,2,3}"
      },
      {
        "name": "VecDot",
        "def": "c = VecDot(a, b)",
        "arguments": [
          {
            "name": "a",
            "type": "table",
            "optional": false,
            "desc": "Vector"
          },
          {
            "name": "b",
            "type": "table",
            "optional": false,
            "desc": "Vector"
          }
        ],
        "return": [
          {
            "name": "c",
            "type": "number",
            "optional": false,
            "desc": "Dot product of a and b"
          }
        ],
        "info": "No Description",
        "example": "local a = Vec(1,2,3)\nlocal b = Vec(3,1,0)\nlocal c = VecDot(a, b)\n\n--c now equals 5"
      },
      {
        "name": "VecCross",
        "def": "c = VecCross(a, b)",
        "arguments": [
          {
            "name": "a",
            "type": "table",
            "optional": false,
            "desc": "Vector"
          },
          {
            "name": "b",
            "type": "table",
            "optional": false,
            "desc": "Vector"
          }
        ],
        "return": [
          {
            "name": "c",
            "type": "table",
            "optional": false,
            "desc": "Cross product of a and b (also called vector product)"
          }
        ],
        "info": "No Description",
        "example": "local a = Vec(1,0,0)\nlocal b = Vec(0,1,0)\nlocal c = VecCross(a, b)\n\n--c now equals {0,0,1}"
      },
      {
        "name": "VecLerp",
        "def": "c = VecLerp(a, b, t)",
        "arguments": [
          {
            "name": "a",
            "type": "table",
            "optional": false,
            "desc": "Vector"
          },
          {
            "name": "b",
            "type": "table",
            "optional": false,
            "desc": "Vector"
          },
          {
            "name": "t",
            "type": "number",
            "optional": false,
            "desc": "fraction (usually between 0.0 and 1.0)"
          }
        ],
        "return": [
          {
            "name": "c",
            "type": "table",
            "optional": false,
            "desc": "Linearly interpolated vector between a and b, using t"
          }
        ],
        "info": "No Description",
        "example": "local a = Vec(2,0,0)\nlocal b = Vec(0,4,2)\nlocal t = 0.5\n\n--These two are equivalent\nlocal c1 = VecLerp(a, b, t)\nlcoal c2 = VecAdd(VecScale(a, 1-t), VecScale(b, t))\n\n--c1 and c2 now equals {1, 2, 1}"
      },
      {
        "name": "Quat",
        "def": "quat = Quat([x], [y], [z], [w])",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "optional": true,
            "desc": "X value"
          },
          {
            "name": "y",
            "type": "number",
            "optional": true,
            "desc": "Y value"
          },
          {
            "name": "z",
            "type": "number",
            "optional": true,
            "desc": "Z value"
          },
          {
            "name": "w",
            "type": "number",
            "optional": true,
            "desc": "W value"
          }
        ],
        "return": [
          {
            "name": "quat",
            "type": "table",
            "optional": false,
            "desc": "New quaternion"
          }
        ],
        "info": "Create new quaternion and optionally initializes it to the provided values.\nDo not attempt to initialize a quaternion with raw values unless you know\nwhat you are doing. Use QuatEuler or QuatAxisAngle instead.\nIf no arguments are given, a unit quaternion will be created: {0, 0, 0, 1}.\nA quaternion is equivalent to a regular lua table with four numbers.",
        "example": "--These are equivalent\nlocal a1 = Quat()\nlocal a2 = {0, 0, 0, 1}"
      },
      {
        "name": "QuatCopy",
        "def": "new = QuatCopy(org)",
        "arguments": [
          {
            "name": "org",
            "type": "table",
            "optional": false,
            "desc": "Quaternion"
          }
        ],
        "return": [
          {
            "name": "new",
            "type": "table",
            "optional": false,
            "desc": "Copy of org quaternion"
          }
        ],
        "info": "Quaternions should never be assigned like regular numbers. Since they are\nimplemented with lua tables assignment means two references pointing to\nthe same data. Use this function instead.",
        "example": "--Do this to assign a quaternion\nlocal right1 = QuatEuler(0, 90, 0)\nlocal right2 = QuatCopy(right1)\n\n--Never do this unless you REALLY know what you're doing\nlocal wrong1 = QuatEuler(0, 90, 0)\nlocal wrong2 = wrong1"
      },
      {
        "name": "QuatAxisAngle",
        "def": "quat = QuatAxisAngle(axis, angle)",
        "arguments": [
          {
            "name": "axis",
            "type": "table",
            "optional": false,
            "desc": "Rotation axis, unit vector"
          },
          {
            "name": "angle",
            "type": "number",
            "optional": false,
            "desc": "Rotation angle in degrees"
          }
        ],
        "return": [
          {
            "name": "quat",
            "type": "table",
            "optional": false,
            "desc": "New quaternion"
          }
        ],
        "info": "Create a quaternion representing a rotation around a specific axis",
        "example": "--Create quaternion representing rotation 30 degrees around Y axis\nlocal q = Quat(Vec(0,1,0), 30)"
      },
      {
        "name": "QuatEuler",
        "def": "quat = QuatEuler(x, y, z)",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "optional": false,
            "desc": "Angle around X axis in degrees, sometimes also called roll or bank"
          },
          {
            "name": "y",
            "type": "number",
            "optional": false,
            "desc": "Angle around Y axis in degrees, sometimes also called yaw or heading"
          },
          {
            "name": "z",
            "type": "number",
            "optional": false,
            "desc": "Angle around Z axis in degrees, sometimes also called pitch or attitude"
          }
        ],
        "return": [
          {
            "name": "quat",
            "type": "table",
            "optional": false,
            "desc": "New quaternion"
          }
        ],
        "info": "Create quaternion using euler angle notation. The order of applied rotations uses the\n\"NASA standard aeroplane\" model:\nRotation around Y axis (yaw or heading)\nRotation around Z axis (pitch or attitude)\nRotation around X axis (roll or bank)",
        "example": "--Create quaternion representing rotation 30 degrees around Y axis\nlocal q = QuatEuler(0, 30, 25)"
      },
      {
        "name": "QuatLookAt",
        "def": "quat = QuatLookAt(eye, target)",
        "arguments": [
          {
            "name": "eye",
            "type": "table",
            "optional": false,
            "desc": "Vector representing the camera location"
          },
          {
            "name": "target",
            "type": "table",
            "optional": false,
            "desc": "Vector representing the point to look at"
          }
        ],
        "return": [
          {
            "name": "quat",
            "type": "table",
            "optional": false,
            "desc": "New quaternion"
          }
        ],
        "info": "Create a quaternion pointing the negative Z axis (forward) towards\na specific point, keeping the Y axis upwards. This is very useful\nfor creating camera transforms.",
        "example": "local eye = Vec(0, 10, 0)\nlocal target = Vec(0, 1, 5)\nlocal rot = QuatLookAt(eye, target)\nSetCameraTransform(Transform(eye, rot))"
      },
      {
        "name": "QuatSlerp",
        "def": "c = QuatSlerp(a, b, t)",
        "arguments": [
          {
            "name": "a",
            "type": "table",
            "optional": false,
            "desc": "Quaternion"
          },
          {
            "name": "b",
            "type": "table",
            "optional": false,
            "desc": "Quaternion"
          },
          {
            "name": "t",
            "type": "number",
            "optional": false,
            "desc": "fraction (usually between 0.0 and 1.0)"
          }
        ],
        "return": [
          {
            "name": "c",
            "type": "table",
            "optional": false,
            "desc": "New quaternion"
          }
        ],
        "info": "Spherical, linear interpolation between a and b, using t. This is\nvery useful for animating between two rotations.",
        "example": "local a = QuatEuler(0, 10, 0)\nlocal b = QuatEuler(0, 0, 45)\n\n--Create quaternion half way between a and b\nlocal q = QuatSlerp(a, b, 0.5)"
      },
      {
        "name": "QuatRotateQuat",
        "def": "c = QuatRotateQuat(a, b)",
        "arguments": [
          {
            "name": "a",
            "type": "table",
            "optional": false,
            "desc": "Quaternion"
          },
          {
            "name": "b",
            "type": "table",
            "optional": false,
            "desc": "Quaternion"
          }
        ],
        "return": [
          {
            "name": "c",
            "type": "table",
            "optional": false,
            "desc": "New quaternion"
          }
        ],
        "info": "Rotate one quaternion with another quaternion. This is mathematically\nequivalent to c = a * b using quaternion multiplication.",
        "example": "local a = QuatEuler(0, 10, 0)\nlocal b = QuatEuler(0, 0, 45)\nlocal q = QuatRotateQuat(a, b)\n\n--q now represents a rotation first 10 degrees around\n--the Y axis and then 45 degrees around the Z axis."
      },
      {
        "name": "Transform",
        "def": "transform = Transform([pos], [rot])",
        "arguments": [
          {
            "name": "pos",
            "type": "table",
            "optional": true,
            "desc": "Vector representing transform position"
          },
          {
            "name": "rot",
            "type": "table",
            "optional": true,
            "desc": "Quaternion representing transform rotation"
          }
        ],
        "return": [
          {
            "name": "transform",
            "type": "table",
            "optional": false,
            "desc": "New transform"
          }
        ],
        "info": "A transform is a regular lua table with two entries: pos and rot,\na vector and quaternion representing transform position and rotation.",
        "example": "--Create transform located at {0, 0, 0} with no rotation\nlocal t1 = Transform()\n\n--Create transform located at {10, 0, 0} with no rotation\nlocal t2 = Transform(Vec(10, 0,0))\n\n--Create transform located at {10, 0, 0}, rotated 45 degrees around Y axis\nlocal t2 = Transform(Vec(10, 0,0), QuatEuler(0, 45, 0))"
      },
      {
        "name": "TransformCopy",
        "def": "new = TransformCopy(org)",
        "arguments": [
          {
            "name": "org",
            "type": "table",
            "optional": false,
            "desc": "Transform"
          }
        ],
        "return": [
          {
            "name": "new",
            "type": "table",
            "optional": false,
            "desc": "Copy of org transform"
          }
        ],
        "info": "Transforms should never be assigned like regular numbers. Since they are\nimplemented with lua tables assignment means two references pointing to\nthe same data. Use this function instead.",
        "example": "--Do this to assign a quaternion\nlocal right1 = Transform(Vec(1,0,0), QuatEuler(0, 90, 0))\nlocal right2 = TransformCopy(right1)\n\n--Never do this unless you REALLY know what you're doing\nlocal wrong1 = Transform(Vec(1,0,0), QuatEuler(0, 90, 0))\nlocal wrong2 = wrong1"
      },
      {
        "name": "TransformToParentTransform",
        "def": "transform = TransformToParentTransform(parent, child)",
        "arguments": [
          {
            "name": "parent",
            "type": "table",
            "optional": false,
            "desc": "Transform"
          },
          {
            "name": "child",
            "type": "table",
            "optional": false,
            "desc": "Transform"
          }
        ],
        "return": [
          {
            "name": "transform",
            "type": "table",
            "optional": false,
            "desc": "New transform"
          }
        ],
        "info": "Transform child transform out of the parent transform.\nThis is the opposite of TransformToLocalTransform.",
        "example": "local b = GetBodyTransform(body)\nlocal s = GetShapeLocalTransform(shape)\n\n--b represents the location of body in world space\n--s represents the location of shape in body space\n\nlocal w = TransformToParentTransform(b, s)\n\n--w now represents the location of shape in world space"
      },
      {
        "name": "TransformToLocalTransform",
        "def": "transform = TransformToLocalTransform(parent, child)",
        "arguments": [
          {
            "name": "parent",
            "type": "table",
            "optional": false,
            "desc": "Transform"
          },
          {
            "name": "child",
            "type": "table",
            "optional": false,
            "desc": "Transform"
          }
        ],
        "return": [
          {
            "name": "transform",
            "type": "table",
            "optional": false,
            "desc": "New transform"
          }
        ],
        "info": "Transform one transform into the local space of another transform.\nThis is the opposite of TransformToParentTransform.",
        "example": "local b = GetBodyTransform(body)\nlocal w = GetShapeWorldTransform(shape)\n\n--b represents the location of body in world space\n--w represents the location of shape in world space\n\nlocal s = TransformToLocalTransform(b, w)\n\n--s now represents the location of shape in body space."
      },
      {
        "name": "TransformToParentVec",
        "def": "r = TransformToParentVec(t, v)",
        "arguments": [
          {
            "name": "t",
            "type": "table",
            "optional": false,
            "desc": "Transform"
          },
          {
            "name": "v",
            "type": "table",
            "optional": false,
            "desc": "Vector"
          }
        ],
        "return": [
          {
            "name": "r",
            "type": "table",
            "optional": false,
            "desc": "Transformed vector"
          }
        ],
        "info": "Transfom vector v out of transform t only considering rotation.",
        "example": "local t = GetBodyTransform(body)\nlocal localUp = Vec(0, 1, 0)\nlocal up = TransformToParentVec(t, localUp)\n\n--up now represents the local body up direction in world space"
      },
      {
        "name": "TransformToLocalVec",
        "def": "r = TransformToLocalVec(t, v)",
        "arguments": [
          {
            "name": "t",
            "type": "table",
            "optional": false,
            "desc": "Transform"
          },
          {
            "name": "v",
            "type": "table",
            "optional": false,
            "desc": "Vector"
          }
        ],
        "return": [
          {
            "name": "r",
            "type": "table",
            "optional": false,
            "desc": "Transformed vector"
          }
        ],
        "info": "Transfom vector v into transform t only considering rotation.",
        "example": "local t = GetBodyTransform(body)\nlocal worldUp = Vec(0, 1, 0)\nlocal up = TransformToLocalVec(t, worldUp)\n\n--up now represents the world up direction in local body space"
      },
      {
        "name": "TransformToParentPoint",
        "def": "r = TransformToParentPoint(t, p)",
        "arguments": [
          {
            "name": "t",
            "type": "table",
            "optional": false,
            "desc": "Transform"
          },
          {
            "name": "p",
            "type": "table",
            "optional": false,
            "desc": "Vector representing position"
          }
        ],
        "return": [
          {
            "name": "r",
            "type": "table",
            "optional": false,
            "desc": "Transformed position"
          }
        ],
        "info": "Transfom position p out of transform t.",
        "example": "local t = GetBodyTransform(body)\nlocal bodyPoint = Vec(0, 0, -1)\nlocal p = TransformToParentPoint(t, bodyPoint)\n\n--p now represents the local body point {0, 0, -1 } in world space"
      },
      {
        "name": "TransformToLocalPoint",
        "def": "r = TransformToLocalPoint(t, p)",
        "arguments": [
          {
            "name": "t",
            "type": "table",
            "optional": false,
            "desc": "Transform"
          },
          {
            "name": "p",
            "type": "table",
            "optional": false,
            "desc": "Vector representing position"
          }
        ],
        "return": [
          {
            "name": "r",
            "type": "table",
            "optional": false,
            "desc": "Transformed position"
          }
        ],
        "info": "Transfom position p into transform t.",
        "example": "local t = GetBodyTransform(body)\nlocal worldOrigo = Vec(0, 0, 0)\nlocal p = TransformToLocalPoint(t, worldOrigo)\n\n--p now represents the position of world origo in local body space"
      }
    ]
  },
  {
    "category": "Entity",
    "desc": "An Entity is the basis of most objects in the Teardown engine (bodies, shapes, lights, locations, etc). All entities can have tags, which is a way to store custom properties on entities for scripting purposes. Some tags are also reserved for engine use. See documentation for details.",
    "functions": [
      {
        "name": "SetTag",
        "def": "SetTag(handle, tag, [value])",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Entity handle"
          },
          {
            "name": "tag",
            "type": "string",
            "optional": false,
            "desc": "Tag name"
          },
          {
            "name": "value",
            "type": "string",
            "optional": true,
            "desc": "Tag value"
          }
        ],
        "return": [],
        "info": "No Description",
        "example": "--Add \"special\" tag to an entity\nSetTag(handle, \"special\")\n\n--Add \"team\" tag to an entity and give it value \"red\"\nSetTag(handle, \"team\", \"red\")"
      },
      {
        "name": "RemoveTag",
        "def": "RemoveTag(handle, tag)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Entity handle"
          },
          {
            "name": "tag",
            "type": "string",
            "optional": false,
            "desc": "Tag name"
          }
        ],
        "return": [],
        "info": "Remove tag from an entity. If the tag had a value it is removed too.",
        "example": "RemoveTag(handle, \"special\")"
      },
      {
        "name": "HasTag",
        "def": "exists = HasTag(handle, tag)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Entity handle"
          },
          {
            "name": "tag",
            "type": "string",
            "optional": false,
            "desc": "Tag name"
          }
        ],
        "return": [
          {
            "name": "exists",
            "type": "boolean",
            "optional": false,
            "desc": "Returns true if entity has tag"
          }
        ],
        "info": "No Description",
        "example": "SetTag(handle, \"special\")\nlocal hasSpecial = HasTag(handle, \"special\") \n-- hasSpecial will be true"
      },
      {
        "name": "GetTagValue",
        "def": "value = GetTagValue(handle, tag)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Entity handle"
          },
          {
            "name": "tag",
            "type": "string",
            "optional": false,
            "desc": "Tag name"
          }
        ],
        "return": [
          {
            "name": "value",
            "type": "string",
            "optional": false,
            "desc": "Returns the tag value, if any. Empty string otherwise."
          }
        ],
        "info": "No Description",
        "example": "SetTag(handle, \"special\")\nvalue = GetTagValue(handle, \"special\")\n-- value will be \"\"\n\nSetTag(handle, \"special\", \"foo\")\nvalue = GetTagValue(handle, \"special\")\n-- value will be \"foo\""
      },
      {
        "name": "GetDescription",
        "def": "description = GetDescription(handle)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Entity handle"
          }
        ],
        "return": [
          {
            "name": "description",
            "type": "string",
            "optional": false,
            "desc": "The description string"
          }
        ],
        "info": "All entities can have an associated description provided through the editor.\nThis function retrieves that description.",
        "example": "local desc = GetDescription(body)"
      },
      {
        "name": "Delete",
        "def": "Delete(handle)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Entity handle"
          }
        ],
        "return": [],
        "info": "Remove an entity from the scene. All entities owned by this entity\nwill also be removed.",
        "example": "Delete(body)\n--All shapes associated with body will also be removed"
      },
      {
        "name": "IsHandleValid",
        "def": "exists = IsHandleValid(handle)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Entity handle"
          }
        ],
        "return": [
          {
            "name": "exists",
            "type": "boolean",
            "optional": false,
            "desc": "Returns true if the entity pointed to by handle still exists"
          }
        ],
        "info": "No Description",
        "example": "valid = IsHandleValid(body)\n\n--valid is true if body still exists\n\nDelete(body)\nvalid = IsHandleValid(body)\n\n--valid will now be false"
      }
    ]
  },
  {
    "category": "Body",
    "desc": "A body represents a rigid body in the scene. It can be either static or dynamic. Only dynamic bodies are affected by physics.",
    "functions": [
      {
        "name": "FindBody",
        "def": "handle = FindBody(tag, [global])",
        "arguments": [
          {
            "name": "tag",
            "type": "string",
            "optional": false,
            "desc": "Tag name"
          },
          {
            "name": "global",
            "type": "boolean",
            "optional": true,
            "desc": "Search in entire scene"
          }
        ],
        "return": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Handle to first body with specified tag or zero if not found"
          }
        ],
        "info": "No Description",
        "example": "--Search for a body tagged \"target\" in script scope\nlocal target = FindBody(\"target\")\n\n--Search for a body tagged \"escape\" in entire scene\nlocal escape = FindBody(\"escape\", true)"
      },
      {
        "name": "FindBodies",
        "def": "list = FindBodies(tag, [global])",
        "arguments": [
          {
            "name": "tag",
            "type": "string",
            "optional": false,
            "desc": "Tag name"
          },
          {
            "name": "global",
            "type": "boolean",
            "optional": true,
            "desc": "Search in entire scene"
          }
        ],
        "return": [
          {
            "name": "list",
            "type": "table",
            "optional": false,
            "desc": "Indexed table with handles to all bodies with specified tag"
          }
        ],
        "info": "No Description",
        "example": "--Search for bodies tagged \"target\" in script scope\nlocal targets = FindBodies(\"target\")\nfor i=1, #targets do\n\tlocal target = targets[i]\n\t...\nend"
      },
      {
        "name": "GetBodyTransform",
        "def": "transform = GetBodyTransform(handle)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Body handle"
          }
        ],
        "return": [
          {
            "name": "transform",
            "type": "table",
            "optional": false,
            "desc": "Transform of the body"
          }
        ],
        "info": "No Description",
        "example": "local t = GetBodyTransform(body)"
      },
      {
        "name": "SetBodyTransform",
        "def": "SetBodyTransform(handle, transform)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Body handle"
          },
          {
            "name": "transform",
            "type": "table",
            "optional": false,
            "desc": "Desired transform"
          }
        ],
        "return": [],
        "info": "No Description",
        "example": "--Move a body 1 meter upwards\nlocal t = GetBodyTransform(body)\nt.pos = VecAdd(t.pos, Vec(0, 1, 0))\nSetBodyTransform(body, t)"
      },
      {
        "name": "GetBodyMass",
        "def": "mass = GetBodyMass(handle)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Body handle"
          }
        ],
        "return": [
          {
            "name": "mass",
            "type": "number",
            "optional": false,
            "desc": "Body mass. Static bodies always return zero mass."
          }
        ],
        "info": "No Description",
        "example": "local mass = GetBodyMass(body)"
      },
      {
        "name": "IsBodyDynamic",
        "def": "dynamic = IsBodyDynamic(handle)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Body handle"
          }
        ],
        "return": [
          {
            "name": "dynamic",
            "type": "boolean",
            "optional": false,
            "desc": "Return true if body is dynamic"
          }
        ],
        "info": "Check if body is dynamic. Note that something that was created static \nmay become dynamic due to destruction.",
        "example": "local dynamic = IsBodyDynamic(body)"
      },
      {
        "name": "SetBodyDynamic",
        "def": "SetBodyDynamic(handle, dynamic)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Body handle"
          },
          {
            "name": "dynamic",
            "type": "boolean",
            "optional": false,
            "desc": "True for dynamic. False for static."
          }
        ],
        "return": [],
        "info": "Change the dynamic state of a body. There is very limited use for this\nfunction. In most situations you should leave it up to the engine to decide.\nUse with caution.",
        "example": "SetBodyDynamic(body, false)"
      },
      {
        "name": "SetBodyVelocity",
        "def": "SetBodyVelocity(handle, velocity)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Body handle (should be a dynamic body)"
          },
          {
            "name": "velocity",
            "type": "table",
            "optional": false,
            "desc": "Vector with linear velocity"
          }
        ],
        "return": [],
        "info": "This can be used for animating bodies with preserved physical interaction,\nbut in most cases you are better off with a motorized joint instead.",
        "example": "local vel = Vec(2,0,0)\nSetBodyVelocity(body, vel)"
      },
      {
        "name": "GetBodyVelocity",
        "def": "velocity = GetBodyVelocity(handle)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Body handle (should be a dynamic body)"
          }
        ],
        "return": [
          {
            "name": "velocity",
            "type": "table",
            "optional": false,
            "desc": "Linear velocity as vector"
          }
        ],
        "info": "No Description",
        "example": "local linVel = GetBodyVelocity(body)"
      },
      {
        "name": "SetBodyAngularVelocity",
        "def": "SetBodyAngularVelocity(handle, angVel)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Body handle (should be a dynamic body)"
          },
          {
            "name": "angVel",
            "type": "table",
            "optional": false,
            "desc": "Vector with angular velocity"
          }
        ],
        "return": [],
        "info": "This can be used for animating bodies with preserved physical interaction,\nbut in most cases you are better off with a motorized joint instead.",
        "example": "local angVel = Vec(2,0,0)\nSetBodyAngularVelocity(body, angVel)"
      },
      {
        "name": "GetBodyAngularVelocity",
        "def": "angVel = GetBodyAngularVelocity(handle)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Body handle (should be a dynamic body)"
          }
        ],
        "return": [
          {
            "name": "angVel",
            "type": "table",
            "optional": false,
            "desc": "Angular velocity as vector"
          }
        ],
        "info": "No Description",
        "example": "local angVel = GetBodyAngularVelocity(body)"
      },
      {
        "name": "ApplyBodyImpulse",
        "def": "ApplyBodyImpulse(handle, position, velocity)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Body handle (should be a dynamic body)"
          },
          {
            "name": "position",
            "type": "table",
            "optional": false,
            "desc": "World space position as vector"
          },
          {
            "name": "velocity",
            "type": "table",
            "optional": false,
            "desc": "World space impulse as vector"
          }
        ],
        "return": [],
        "info": "Apply impulse to dynamic body at position (give body a push).",
        "example": "local pos = Vec(0,1,0)\nlocal imp = Vec(0,0,10)\nApplyBodyImpulse(body, pos, imp)"
      },
      {
        "name": "GetBodyShapes",
        "def": "list = GetBodyShapes(handle)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Body handle"
          }
        ],
        "return": [
          {
            "name": "list",
            "type": "table",
            "optional": false,
            "desc": "Indexed table of shape handles"
          }
        ],
        "info": "Return handles to all shapes owned by a body",
        "example": "local shapes = GetBodyShapes(body)\nfor i=1,#shapes do\n\tlocal shape = shapes[i]\nend"
      },
      {
        "name": "GetBodyVehicle",
        "def": "handle = GetBodyVehicle(body)",
        "arguments": [
          {
            "name": "body",
            "type": "number",
            "optional": false,
            "desc": "Body handle"
          }
        ],
        "return": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Get parent vehicle for body, or zero if not part of vehicle"
          }
        ],
        "info": "No Description",
        "example": "local vehicle = GetBodyVehicle(body)"
      },
      {
        "name": "GetBodyBounds",
        "def": "min, max = GetBodyBounds(handle)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Body handle"
          }
        ],
        "return": [
          {
            "name": "min",
            "type": "table",
            "optional": false,
            "desc": "Vector representing the AABB lower bound"
          },
          {
            "name": "max",
            "type": "table",
            "optional": false,
            "desc": "Vector representing the AABB upper bound"
          }
        ],
        "info": "Return the world space, axis-aligned bounding box for a body.",
        "example": "local min, max = GetBodyBounds(body)\nlocal boundsSize = VecSub(max, min)\nlocal center = VecLerp(min, max, 0.5)"
      },
      {
        "name": "GetBodyCenterOfMass",
        "def": "point = GetBodyCenterOfMass(handle)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Body handle"
          }
        ],
        "return": [
          {
            "name": "point",
            "type": "table",
            "optional": false,
            "desc": "Vector representing local center of mass in body space"
          }
        ],
        "info": "No Description",
        "example": "--Visualize center of mass on for body\nlocal com = GetBodyCenterOfMass(body)\nlocal worldPoint = TransformToParentPoint(GetBodyTransform(body), com)\nDebugCross(worldPoint)"
      },
      {
        "name": "IsBodyVisible",
        "def": "visible = IsBodyVisible(handle, maxDist)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Body handle"
          },
          {
            "name": "maxDist",
            "type": "nuber",
            "optional": false,
            "desc": "Maximum visible distance"
          }
        ],
        "return": [
          {
            "name": "visible",
            "type": "boolean",
            "optional": false,
            "desc": "Return true if body is visible"
          }
        ],
        "info": "This will check if a body is currently visible in the camera frustum and\nnot occluded by other objects.",
        "example": "if IsBodyVisible(body, 25) then\n\t--Body is within 25 meters visible to the camera\nend"
      },
      {
        "name": "IsBodyBroken",
        "def": "broken = IsBodyBroken(handle)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Body handle"
          }
        ],
        "return": [
          {
            "name": "broken",
            "type": "boolean",
            "optional": false,
            "desc": "Return true if body is broken"
          }
        ],
        "info": "Determine if any shape of a body has been broken.",
        "example": "local broken = IsBodyBroken(body)"
      },
      {
        "name": "IsBodyJointedToStatic",
        "def": "result = IsBodyJointedToStatic(handle)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Body handle"
          }
        ],
        "return": [
          {
            "name": "result",
            "type": "boolean",
            "optional": false,
            "desc": "Return true if body is in any way connected to a static body"
          }
        ],
        "info": "Determine if a body is in any way connected to a static object, either by being static itself or\nbe being directly or indirectly jointed to something static.",
        "example": "local connectedToStatic = IsBodyJointedToStatic(body)"
      },
      {
        "name": "DrawBodyOutline",
        "def": "DrawBodyOutline(handle, [r], [g], [b], a)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Body handle"
          },
          {
            "name": "r",
            "type": "number",
            "optional": true,
            "desc": "Red"
          },
          {
            "name": "g",
            "type": "number",
            "optional": true,
            "desc": "Green"
          },
          {
            "name": "b",
            "type": "number",
            "optional": true,
            "desc": "Blue"
          },
          {
            "name": "a",
            "type": "number",
            "optional": false,
            "desc": "Alpha"
          }
        ],
        "return": [],
        "info": "Render next frame with an outline around specified body.\nIf no color is given, a white outline will be drawn.",
        "example": "--Draw white outline at 50% transparency\nDrawBodyOutline(body, 0.5)\n\n--Draw green outline, fully opaque\nDrawBodyOutline(body, 0, 1, 0, 1)"
      },
      {
        "name": "DrawBodyHighlight",
        "def": "DrawBodyHighlight(handle, amount)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Body handle"
          },
          {
            "name": "amount",
            "type": "number",
            "optional": false,
            "desc": "Amount"
          }
        ],
        "return": [],
        "info": "Flash the appearance of a body when rendering this frame. This is\nused for valuables in the game.",
        "example": "DrawBodyHighlight(body, 0.5)"
      }
    ]
  },
  {
    "category": "Shape",
    "desc": "A shape is a voxel object and always owned by a body. A single body may contain multiple shapes. The transform of shape is expressed in the parent body coordinate system.",
    "functions": [
      {
        "name": "FindShape",
        "def": "handle = FindShape(tag, [global])",
        "arguments": [
          {
            "name": "tag",
            "type": "string",
            "optional": false,
            "desc": "Tag name"
          },
          {
            "name": "global",
            "type": "boolean",
            "optional": true,
            "desc": "Search in entire scene"
          }
        ],
        "return": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Handle to first shape with specified tag or zero if not found"
          }
        ],
        "info": "No Description",
        "example": "--Search for a shape tagged \"mybox\" in script scope\nlocal target = FindShape(\"mybox\")\n\n--Search for a shape tagged \"laserturret\" in entire scene\nlocal escape = FindBody(\"laserturret\", true)"
      },
      {
        "name": "FindShapes",
        "def": "list = FindShapes(tag, [global])",
        "arguments": [
          {
            "name": "tag",
            "type": "string",
            "optional": false,
            "desc": "Tag name"
          },
          {
            "name": "global",
            "type": "boolean",
            "optional": true,
            "desc": "Search in entire scene"
          }
        ],
        "return": [
          {
            "name": "list",
            "type": "table",
            "optional": false,
            "desc": "Indexed table with handles to all shapes with specified tag"
          }
        ],
        "info": "No Description",
        "example": "--Search for shapes tagged \"alarmbox\" in script scope\nlocal shapes = FindShapes(\"alarmbox\")\nfor i=1, #shapes do\n\tlocal shape = shapes[i]\n\t...\nend"
      },
      {
        "name": "GetShapeLocalTransform",
        "def": "transform = GetShapeLocalTransform(handle)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Shape handle"
          }
        ],
        "return": [
          {
            "name": "transform",
            "type": "table",
            "optional": false,
            "desc": "Return shape transform in body space"
          }
        ],
        "info": "No Description",
        "example": "--Shape transform in body local space\nlocal shapeTransform = GetShapeLocalTransform(shape)\n\n--Body transform in world space\nlocal bodyTransforn = GetBodyTransform(GetShapeBody(shape))\n\n--Shape transform in world space\nlocal worldTranform = TransformToParentTransform(bodyTransform, shapeTransform)"
      },
      {
        "name": "SetShapeLocalTransform",
        "def": "SetShapeLocalTransform(handle, transform)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Shape handle"
          },
          {
            "name": "transform",
            "type": "table",
            "optional": false,
            "desc": "Shape transform in body space"
          }
        ],
        "return": [],
        "info": "No Description",
        "example": "local transform = Transform(Vec(0, 1, 0), QuatEuler(0, 90, 0))\nSetShapeLocalTransform(shape, transform)"
      },
      {
        "name": "GetShapeWorldTransform",
        "def": "transform = GetShapeWorldTransform(handle)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Shape handle"
          }
        ],
        "return": [
          {
            "name": "transform",
            "type": "table",
            "optional": false,
            "desc": "Return shape transform in world space"
          }
        ],
        "info": "This is a convenience function, transforming the shape out of body space",
        "example": "local worldTransform = GetShapeWorldTransform(shape)\n\n--This is equivalent to\nlocal shapeTransform = GetShapeLocalTransform(shape)\nlocal bodyTransforn = GetBodyTransform(GetShapeBody(shape))\nworldTranform = TransformToParentTransform(bodyTransform, shapeTransform)"
      },
      {
        "name": "GetShapeBody",
        "def": "handle = GetShapeBody(handle)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Shape handle"
          }
        ],
        "return": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Body handle"
          }
        ],
        "info": "Get handle to the body this shape is owned by. A shape is always owned by a body,\nbut can be transfered to a new body during destruction.",
        "example": "local body = GetShapeBody(shape)"
      },
      {
        "name": "GetShapeJoints",
        "def": "list = GetShapeJoints(shape)",
        "arguments": [
          {
            "name": "shape",
            "type": "number",
            "optional": false,
            "desc": "Shape handle"
          }
        ],
        "return": [
          {
            "name": "list",
            "type": "table",
            "optional": false,
            "desc": "Indexed table with joints connected to shape"
          }
        ],
        "info": "No Description",
        "example": "local hinges = GetShapeJoints(door)\nfor i=1, #hinges do\n\tlocal joint = hinges[i]\n\t...\nend"
      },
      {
        "name": "GetShapeLights",
        "def": "list = GetShapeLights(shape)",
        "arguments": [
          {
            "name": "shape",
            "type": "number",
            "optional": false,
            "desc": "Shape handle"
          }
        ],
        "return": [
          {
            "name": "list",
            "type": "table",
            "optional": false,
            "desc": "Indexed table of lights owned by shape"
          }
        ],
        "info": "No Description",
        "example": "local lights = GetShapeLights(shape)\nfor i=1, #lights do\n\tlocal light = lights[i]\n\t...\nend"
      },
      {
        "name": "GetShapeBounds",
        "def": "min, max = GetShapeBounds(handle)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Shape handle"
          }
        ],
        "return": [
          {
            "name": "min",
            "type": "table",
            "optional": false,
            "desc": "Vector representing the AABB lower bound"
          },
          {
            "name": "max",
            "type": "table",
            "optional": false,
            "desc": "Vector representing the AABB upper bound"
          }
        ],
        "info": "Return the world space, axis-aligned bounding box for a shape.",
        "example": "local min, max = GetShapeBounds(shape)\nlocal boundsSize = VecSub(max, min)\nlocal center = VecLerp(min, max, 0.5)"
      },
      {
        "name": "SetShapeEmissiveScale",
        "def": "SetShapeEmissiveScale(handle, scale)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Shape handle"
          },
          {
            "name": "scale",
            "type": "number",
            "optional": false,
            "desc": "Scale factor for emissiveness"
          }
        ],
        "return": [],
        "info": "Scale emissiveness for shape. If the shape has light sources attached,\ntheir intensity will be scaled by the same amount.",
        "example": "--Pulsate emissiveness and light intensity for shape\nlocal scale = math.sin(GetTime())*0.5 + 0.5\nSetShapeEmissiveScale(shape, scale)"
      },
      {
        "name": "GetShapeMaterialAtPosition",
        "def": "type, r, g, b, a = GetShapeMaterialAtPosition(handle, pos)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Shape handle"
          },
          {
            "name": "pos",
            "type": "table",
            "optional": false,
            "desc": "Position in world space"
          }
        ],
        "return": [
          {
            "name": "type",
            "type": "string",
            "optional": false,
            "desc": "Material type"
          },
          {
            "name": "r",
            "type": "number",
            "optional": false,
            "desc": "Red"
          },
          {
            "name": "g",
            "type": "number",
            "optional": false,
            "desc": "Green"
          },
          {
            "name": "b",
            "type": "number",
            "optional": false,
            "desc": "Blue"
          },
          {
            "name": "a",
            "type": "number",
            "optional": false,
            "desc": "Alpha"
          }
        ],
        "info": "Return material properties for a particular voxel",
        "example": "local hit, dist, normal, shape = QueryRaycast(pos, dir, 10)\nif hit then\n\tlocal hitPoint = VecAdd(pos, VecScale(dir, dist))\n\tlocal mat = GetShapeMaterialAtPosition(shape, hitPoint)\n\tDebugPrint(\"Raycast hit voxel made out of \" .. mat)\nend"
      },
      {
        "name": "IsShapeVisible",
        "def": "visible = IsShapeVisible(handle, maxDist)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Shape handle"
          },
          {
            "name": "maxDist",
            "type": "nuber",
            "optional": false,
            "desc": "Maximum visible distance"
          }
        ],
        "return": [
          {
            "name": "visible",
            "type": "boolean",
            "optional": false,
            "desc": "Return true if shape is visible"
          }
        ],
        "info": "This will check if a shape is currently visible in the camera frustum and\nnot occluded by other objects.",
        "example": "if IsShapeVisible(shape, 25) then\n\t--Shape is within 25 meters visible to the camera\nend"
      },
      {
        "name": "IsShapeBroken",
        "def": "broken = IsShapeBroken(handle)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Shape handle"
          }
        ],
        "return": [
          {
            "name": "broken",
            "type": "boolean",
            "optional": false,
            "desc": "Return true if shape is broken"
          }
        ],
        "info": "Determine if shape has been broken. Note that a shape can be transfered\nto another body during destruction, but might still not be considered\nbroken if all voxels are intact.",
        "example": "local broken = IsShapeBroken(shape)"
      },
      {
        "name": "DrawShapeOutline",
        "def": "DrawShapeOutline(handle, [r], [g], [b], a)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Shape handle"
          },
          {
            "name": "r",
            "type": "number",
            "optional": true,
            "desc": "Red"
          },
          {
            "name": "g",
            "type": "number",
            "optional": true,
            "desc": "Green"
          },
          {
            "name": "b",
            "type": "number",
            "optional": true,
            "desc": "Blue"
          },
          {
            "name": "a",
            "type": "number",
            "optional": false,
            "desc": "Alpha"
          }
        ],
        "return": [],
        "info": "Render next frame with an outline around specified shape.\nIf no color is given, a white outline will be drawn.",
        "example": "--Draw white outline at 50% transparency\nDrawShapeOutline(shape, 0.5)\n\n--Draw green outline, fully opaque\nDrawShapeOutline(shape, 0, 1, 0, 1)"
      },
      {
        "name": "DrawShapeHighlight",
        "def": "DrawShapeHighlight(handle, amount)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Shape handle"
          },
          {
            "name": "amount",
            "type": "number",
            "optional": false,
            "desc": "Amount"
          }
        ],
        "return": [],
        "info": "Flash the appearance of a shape when rendering this frame.",
        "example": "DrawShapeHighlight(shape, 0.5)"
      }
    ]
  },
  {
    "category": "Location",
    "desc": "Locations are transforms placed in the editor as markers. Location transforms are always expressed in world space coordinates.",
    "functions": [
      {
        "name": "FindLocation",
        "def": "handle = FindLocation(tag, [global])",
        "arguments": [
          {
            "name": "tag",
            "type": "string",
            "optional": false,
            "desc": "Tag name"
          },
          {
            "name": "global",
            "type": "boolean",
            "optional": true,
            "desc": "Search in entire scene"
          }
        ],
        "return": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Handle to first location with specified tag or zero if not found"
          }
        ],
        "info": "No Description",
        "example": "local loc = FindLocation(\"start\")"
      },
      {
        "name": "FindLocations",
        "def": "list = FindLocations(tag, [global])",
        "arguments": [
          {
            "name": "tag",
            "type": "string",
            "optional": false,
            "desc": "Tag name"
          },
          {
            "name": "global",
            "type": "boolean",
            "optional": true,
            "desc": "Search in entire scene"
          }
        ],
        "return": [
          {
            "name": "list",
            "type": "table",
            "optional": false,
            "desc": "Indexed table with handles to all locations with specified tag"
          }
        ],
        "info": "No Description",
        "example": "--Search for locations tagged \"waypoint\" in script scope\nlocal locations = FindLocations(\"waypoint\")\nfor i=1, #locs do\n\tlocal locs = locations[i]\n\t...\nend"
      },
      {
        "name": "GetLocationTransform",
        "def": "transform = GetLocationTransform(handle)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Location handle"
          }
        ],
        "return": [
          {
            "name": "transform",
            "type": "table",
            "optional": false,
            "desc": "Transform of the location"
          }
        ],
        "info": "No Description",
        "example": "local t = GetLocationTransform(loc)"
      }
    ]
  },
  {
    "category": "Joint",
    "desc": "Joints are used to physically connect two shapes. There are several types of joints and they are typically placed in the editor. When destruction occurs, joints may be transferred to new shapes, detached or completely disabled.",
    "functions": [
      {
        "name": "FindJoint",
        "def": "handle = FindJoint(tag, [global])",
        "arguments": [
          {
            "name": "tag",
            "type": "string",
            "optional": false,
            "desc": "Tag name"
          },
          {
            "name": "global",
            "type": "boolean",
            "optional": true,
            "desc": "Search in entire scene"
          }
        ],
        "return": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Handle to first joint with specified tag or zero if not found"
          }
        ],
        "info": "No Description",
        "example": "local joint = FindLocation(\"doorhinge\")"
      },
      {
        "name": "FindJoints",
        "def": "list = FindJoints(tag, [global])",
        "arguments": [
          {
            "name": "tag",
            "type": "string",
            "optional": false,
            "desc": "Tag name"
          },
          {
            "name": "global",
            "type": "boolean",
            "optional": true,
            "desc": "Search in entire scene"
          }
        ],
        "return": [
          {
            "name": "list",
            "type": "table",
            "optional": false,
            "desc": "Indexed table with handles to all joints with specified tag"
          }
        ],
        "info": "No Description",
        "example": "--Search for locations tagged \"doorhinge\" in script scope\nlocal hinges = FindLocations(\"doorhinge\")\nfor i=1, #hinges do\n\tlocal joint = hinges[i]\n\t...\nend"
      },
      {
        "name": "IsJointBroken",
        "def": "broken = IsJointBroken(joint)",
        "arguments": [
          {
            "name": "joint",
            "type": "number",
            "optional": false,
            "desc": "Joint handle"
          }
        ],
        "return": [
          {
            "name": "broken",
            "type": "boolean",
            "optional": false,
            "desc": "True if joint is broken"
          }
        ],
        "info": "No Description",
        "example": "local broken = IsJointBroken(joint)"
      },
      {
        "name": "GetJointType",
        "def": "type = GetJointType(joint)",
        "arguments": [
          {
            "name": "joint",
            "type": "number",
            "optional": false,
            "desc": "Joint handle"
          }
        ],
        "return": [
          {
            "name": "type",
            "type": "string",
            "optional": false,
            "desc": "Joint type"
          }
        ],
        "info": "Joint type is one of the following: \"ball\", \"hinge\", \"prismatic\" or \"rope\".\nAn empty string is returned if joint handle is invalid.",
        "example": "if GetJointType(joint) == \"rope\" then\n\t--Joint is rope\nend"
      },
      {
        "name": "GetJointOtherShape",
        "def": "other = GetJointOtherShape(joint, shape)",
        "arguments": [
          {
            "name": "joint",
            "type": "number",
            "optional": false,
            "desc": "Joint handle"
          },
          {
            "name": "shape",
            "type": "number",
            "optional": false,
            "desc": "Shape handle"
          }
        ],
        "return": [
          {
            "name": "other",
            "type": "number",
            "optional": false,
            "desc": "Other shape handle"
          }
        ],
        "info": "A joint is always connected to two shapes. Use this function if you know \none shape and want to find the other one.",
        "example": "--joint is connected to a and b\n\notherShape = GetJointOtherShape(joint, a)\n--otherShape is now b\n\notherShape = GetJointOtherShape(joint, b)\n--otherShape is now a"
      },
      {
        "name": "SetJointMotor",
        "def": "SetJointMotor(joint, velocity, [strength])",
        "arguments": [
          {
            "name": "joint",
            "type": "number",
            "optional": false,
            "desc": "Joint handle"
          },
          {
            "name": "velocity",
            "type": "number",
            "optional": false,
            "desc": "Desired velocity"
          },
          {
            "name": "strength",
            "type": "number",
            "optional": true,
            "desc": "Desired strength. Default is infinite strength."
          }
        ],
        "return": [],
        "info": "Set joint motor target velocity. If joint is of type hinge, velocity is\ngiven in radians per second angular velocity. If joint type is prismatic joint\nvelocity is given in meters per second.",
        "example": "SetJointMotor(hinge, 0.5)"
      },
      {
        "name": "GetJointLimits",
        "def": "min, max = GetJointLimits(joint)",
        "arguments": [
          {
            "name": "joint",
            "type": "number",
            "optional": false,
            "desc": "Joint handle"
          }
        ],
        "return": [
          {
            "name": "min",
            "type": "number",
            "optional": false,
            "desc": "Minimum joint limit (angle or distance)"
          },
          {
            "name": "max",
            "type": "number",
            "optional": false,
            "desc": "Maximum joint limit (angle or distance)"
          }
        ],
        "info": "Return joint limits for hinge or prismatic joint. Returns angle or distance\ndepending on joint type.",
        "example": "local min, max = GetJointLimits(hinge)"
      },
      {
        "name": "GetJointMovement",
        "def": "movement = GetJointMovement(joint)",
        "arguments": [
          {
            "name": "joint",
            "type": "number",
            "optional": false,
            "desc": "Joint handle"
          }
        ],
        "return": [
          {
            "name": "movement",
            "type": "number",
            "optional": false,
            "desc": "Current joint position or angle"
          }
        ],
        "info": "Return the current position or angle or the joint, measured in same way\nas joint limits.",
        "example": "local current = GetJointMovement(hinge)"
      }
    ]
  },
  {
    "category": "Light",
    "desc": "Light sources can be of several differnt types and configured in the editor. If a light source is owned by a shape, the intensity of the light source is scaled by the emissive scale of that shape. If the parent shape breaks, the emissive scale is set to zero and the light source is disabled. A light source without a parent shape will always emit light, unless exlicitly disabled by a script.",
    "functions": [
      {
        "name": "FindLight",
        "def": "handle = FindLight(tag, [global])",
        "arguments": [
          {
            "name": "tag",
            "type": "string",
            "optional": false,
            "desc": "Tag name"
          },
          {
            "name": "global",
            "type": "boolean",
            "optional": true,
            "desc": "Search in entire scene"
          }
        ],
        "return": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Handle to first light with specified tag or zero if not found"
          }
        ],
        "info": "No Description",
        "example": "local light = FindLight(\"main\")"
      },
      {
        "name": "FindLights",
        "def": "list = FindLights(tag, [global])",
        "arguments": [
          {
            "name": "tag",
            "type": "string",
            "optional": false,
            "desc": "Tag name"
          },
          {
            "name": "global",
            "type": "boolean",
            "optional": true,
            "desc": "Search in entire scene"
          }
        ],
        "return": [
          {
            "name": "list",
            "type": "table",
            "optional": false,
            "desc": "Indexed table with handles to all lights with specified tag"
          }
        ],
        "info": "No Description",
        "example": "--Search for lights tagged \"main\" in script scope\nlocal lights = FindLights(\"main\")\nfor i=1, #lights do\n\tlocal light = lights[i]\n\t...\nend"
      },
      {
        "name": "SetLightEnabled",
        "def": "SetLightEnabled(handle, enabled)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Light handle"
          },
          {
            "name": "enabled",
            "type": "boolean",
            "optional": false,
            "desc": "Set to true if light should be enabled"
          }
        ],
        "return": [],
        "info": "If light is owned by a shape, the emissive scale of that shape will be set \nto 0.0 when light is disabled and 1.0 when light is enabled.",
        "example": "SetLightEnabled(light, false)"
      },
      {
        "name": "SetLightColor",
        "def": "SetLightColor(handle, r, g, b)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Light handle"
          },
          {
            "name": "r",
            "type": "number",
            "optional": false,
            "desc": "Red value"
          },
          {
            "name": "g",
            "type": "number",
            "optional": false,
            "desc": "Green value"
          },
          {
            "name": "b",
            "type": "number",
            "optional": false,
            "desc": "Blue value"
          }
        ],
        "return": [],
        "info": "This will only set the color tint of the light. Use SetLightIntensity for brightness.\nSetting the light color will not affect the emissive color of a parent shape.",
        "example": "--Set light color to yellow\nSetLightColor(light, 1, 1, 0)"
      },
      {
        "name": "SetLightIntensity",
        "def": "SetLightIntensity(handle, intensity)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Light handle"
          },
          {
            "name": "intensity",
            "type": "number",
            "optional": false,
            "desc": "Desired intensity of the light"
          }
        ],
        "return": [],
        "info": "If the shape is owned by a shape you most likely want to use\nSetShapeEmissiveScale instead, which will affect both the emissiveness \nof the shape and the brightness of the light at the same time.",
        "example": "--Pulsate light\nSetLightIntensity(light, math.sin(GetTime())*0.5 + 1.0)"
      },
      {
        "name": "GetLightTransform",
        "def": "transform = GetLightTransform(handle)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Light handle"
          }
        ],
        "return": [
          {
            "name": "transform",
            "type": "table",
            "optional": false,
            "desc": "World space light transform"
          }
        ],
        "info": "Lights that are owned by a dynamic shape are automatcially moved with that shape",
        "example": "local pos = GetLightTransform(light).pos"
      },
      {
        "name": "GetLightShape",
        "def": "handle = GetLightShape(handle)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Light handle"
          }
        ],
        "return": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Shape handle or zero if not attached to shape"
          }
        ],
        "info": "No Description",
        "example": "local shape = GetLightShape(light)"
      },
      {
        "name": "IsPointAffectedByLight",
        "def": "affected = IsPointAffectedByLight(handle, point)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Light handle"
          },
          {
            "name": "point",
            "type": "table",
            "optional": false,
            "desc": "World space point as vector"
          }
        ],
        "return": [
          {
            "name": "affected",
            "type": "boolean",
            "optional": false,
            "desc": "Return true if point is in light cone and range"
          }
        ],
        "info": "No Description",
        "example": "local point = Vec(0, 10, 0)\nlocal affected = IsPointAffectedByLight(light, point)"
      }
    ]
  },
  {
    "category": "Trigger",
    "desc": "Triggers can be placed in the scene and queried by scripts to see if something is within a certain part of the scene.",
    "functions": [
      {
        "name": "FindTrigger",
        "def": "handle = FindTrigger(tag, [global])",
        "arguments": [
          {
            "name": "tag",
            "type": "string",
            "optional": false,
            "desc": "Tag name"
          },
          {
            "name": "global",
            "type": "boolean",
            "optional": true,
            "desc": "Search in entire scene"
          }
        ],
        "return": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Handle to first trigger with specified tag or zero if not found"
          }
        ],
        "info": "No Description",
        "example": "local goal = FindTrigger(\"goal\")"
      },
      {
        "name": "FindTriggers",
        "def": "list = FindTriggers(tag, [global])",
        "arguments": [
          {
            "name": "tag",
            "type": "string",
            "optional": false,
            "desc": "Tag name"
          },
          {
            "name": "global",
            "type": "boolean",
            "optional": true,
            "desc": "Search in entire scene"
          }
        ],
        "return": [
          {
            "name": "list",
            "type": "table",
            "optional": false,
            "desc": "Indexed table with handles to all triggers with specified tag"
          }
        ],
        "info": "No Description",
        "example": "--Find triggers tagged \"toxic\" in script scope\nlocal triggers = FindTriggers(\"toxic\")\nfor i=1, #triggers do\n\tlocal trigger = triggers[i]\n\t...\nend"
      },
      {
        "name": "GetTriggerTransform",
        "def": "transform = GetTriggerTransform(handle)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Trigger handle"
          }
        ],
        "return": [
          {
            "name": "transform",
            "type": "table",
            "optional": false,
            "desc": "Current trigger transform in world space"
          }
        ],
        "info": "No Description",
        "example": "local t = GetTriggerTransform(trigger)"
      },
      {
        "name": "SetTriggerTransform",
        "def": "SetTriggerTransform(handle, transform)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Trigger handle"
          },
          {
            "name": "transform",
            "type": "table",
            "optional": false,
            "desc": "Desired trigger transform in world space"
          }
        ],
        "return": [],
        "info": "No Description",
        "example": "local t = Transform(Vec(0, 1, 0), QuatEuler(0, 90, 0))\nSetTriggerTransform(trigger, t)"
      },
      {
        "name": "IsBodyInTrigger",
        "def": "IsBodyInTrigger(trigger, body)",
        "arguments": [
          {
            "name": "trigger",
            "type": "number",
            "optional": false,
            "desc": "Trigger handle"
          },
          {
            "name": "body",
            "type": "number",
            "optional": false,
            "desc": "Body handle"
          }
        ],
        "return": [],
        "info": "This function will only check the center point of the body",
        "example": "if IsBodyInTrigger(trigger, body) then\n\t...\nend"
      },
      {
        "name": "IsVehicleInTrigger",
        "def": "IsVehicleInTrigger(trigger, vehicle)",
        "arguments": [
          {
            "name": "trigger",
            "type": "number",
            "optional": false,
            "desc": "Trigger handle"
          },
          {
            "name": "vehicle",
            "type": "number",
            "optional": false,
            "desc": "Vehicle handle"
          }
        ],
        "return": [],
        "info": "This function will only check origo of vehicle",
        "example": "if IsVehicleInTrigger(trigger, vehicle) then\n\t...\nend"
      },
      {
        "name": "IsShapeInTrigger",
        "def": "IsShapeInTrigger(trigger, shape)",
        "arguments": [
          {
            "name": "trigger",
            "type": "number",
            "optional": false,
            "desc": "Trigger handle"
          },
          {
            "name": "shape",
            "type": "number",
            "optional": false,
            "desc": "Shape handle"
          }
        ],
        "return": [],
        "info": "This function will only check the center point of the shape",
        "example": "if IsShapeInTrigger(trigger, shape) then\n\t...\nend"
      },
      {
        "name": "IsPointInTrigger",
        "def": "IsPointInTrigger(trigger, point)",
        "arguments": [
          {
            "name": "trigger",
            "type": "number",
            "optional": false,
            "desc": "Trigger handle"
          },
          {
            "name": "point",
            "type": "table",
            "optional": false,
            "desc": "Word space point as vector"
          }
        ],
        "return": [],
        "info": "No Description",
        "example": "local p = Vec(0, 10, 0)\nif IsPointInTrigger(trigger, p) then\n\t...\nend"
      },
      {
        "name": "IsTriggerEmpty",
        "def": "empty, maxpoint = IsTriggerEmpty(handle, [demolision])",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Trigger handle"
          },
          {
            "name": "demolision",
            "type": "boolean",
            "optional": true,
            "desc": "If true, small debris and vehicles are ignored"
          }
        ],
        "return": [
          {
            "name": "empty",
            "type": "boolean",
            "optional": false,
            "desc": "True if trigger is empty"
          },
          {
            "name": "maxpoint",
            "type": "table",
            "optional": false,
            "desc": "World space point of highest point (largest Y coordinate) if not empty"
          }
        ],
        "info": "This function will check if trigger is empty. If trigger contains any part of a body\nit will return false and the highest point as second return value.",
        "example": "local empty, highPoint = IsTriggerEmpty(trigger)\nif not empty then\n\t--highPoint[2] is the tallest point in trigger\nend"
      }
    ]
  },
  {
    "category": "Screen",
    "desc": "Screens display the content of UI scripts and can be made interactive.",
    "functions": [
      {
        "name": "FindScreen",
        "def": "handle = FindScreen(tag, [global])",
        "arguments": [
          {
            "name": "tag",
            "type": "string",
            "optional": false,
            "desc": "Tag name"
          },
          {
            "name": "global",
            "type": "boolean",
            "optional": true,
            "desc": "Search in entire scene"
          }
        ],
        "return": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Handle to first screen with specified tag or zero if not found"
          }
        ],
        "info": "No Description",
        "example": "local screen = FindTrigger(\"tv\")"
      },
      {
        "name": "FindScreens",
        "def": "list = FindScreens(tag, [global])",
        "arguments": [
          {
            "name": "tag",
            "type": "string",
            "optional": false,
            "desc": "Tag name"
          },
          {
            "name": "global",
            "type": "boolean",
            "optional": true,
            "desc": "Search in entire scene"
          }
        ],
        "return": [
          {
            "name": "list",
            "type": "table",
            "optional": false,
            "desc": "Indexed table with handles to all screens with specified tag"
          }
        ],
        "info": "No Description",
        "example": "--Find screens tagged \"tv\" in script scope\nlocal screens = FindScreens(\"tv\")\nfor i=1, #screens do\n\tlocal screen = screens[i]\n\t...\nend"
      },
      {
        "name": "SetScreenEnabled",
        "def": "SetScreenEnabled(screen, enabled)",
        "arguments": [
          {
            "name": "screen",
            "type": "number",
            "optional": false,
            "desc": "Screen handle"
          },
          {
            "name": "enabled",
            "type": "boolean",
            "optional": false,
            "desc": "True if screen should be enabled"
          }
        ],
        "return": [],
        "info": "Enable or disable screen",
        "example": "SetScreenEnabled(screen, true)"
      },
      {
        "name": "IsScreenEnabled",
        "def": "enabled = IsScreenEnabled(screen)",
        "arguments": [
          {
            "name": "screen",
            "type": "number",
            "optional": false,
            "desc": "Screen handle"
          }
        ],
        "return": [
          {
            "name": "enabled",
            "type": "boolean",
            "optional": false,
            "desc": "True if screen is enabled"
          }
        ],
        "info": "No Description",
        "example": "local b = IsScreenEnabled(screen)"
      },
      {
        "name": "GetScreenShape",
        "def": "shape = GetScreenShape(screen)",
        "arguments": [
          {
            "name": "screen",
            "type": "number",
            "optional": false,
            "desc": "Screen handle"
          }
        ],
        "return": [
          {
            "name": "shape",
            "type": "number",
            "optional": false,
            "desc": "Shape handle or zero if none"
          }
        ],
        "info": "Return handle to the parent shape of a screen",
        "example": "local shape = GetScreenShape(screen)"
      }
    ]
  },
  {
    "category": "Vehicle",
    "desc": "Vehicles are set up in the editor and consists of multiple parts owned by a vehicle entity.",
    "functions": [
      {
        "name": "FindVehicle",
        "def": "handle = FindVehicle(tag, [global])",
        "arguments": [
          {
            "name": "tag",
            "type": "string",
            "optional": false,
            "desc": "Tag name"
          },
          {
            "name": "global",
            "type": "boolean",
            "optional": true,
            "desc": "Search in entire scene"
          }
        ],
        "return": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Handle to first vehicle with specified tag or zero if not found"
          }
        ],
        "info": "No Description",
        "example": "local vehicle = FindVehicle(\"mycar\")"
      },
      {
        "name": "FindVehicles",
        "def": "list = FindVehicles(tag, [global])",
        "arguments": [
          {
            "name": "tag",
            "type": "string",
            "optional": false,
            "desc": "Tag name"
          },
          {
            "name": "global",
            "type": "boolean",
            "optional": true,
            "desc": "Search in entire scene"
          }
        ],
        "return": [
          {
            "name": "list",
            "type": "table",
            "optional": false,
            "desc": "Indexed table with handles to all vehicles with specified tag"
          }
        ],
        "info": "No Description",
        "example": "--Find all vehicles in level tagged \"boat\"\nlocal boats = FindVehicles(\"boat\")\nfor i=1, #boats do\n\tlocal boat = boats[i]\n\t...\nend"
      },
      {
        "name": "GetVehicleTransform",
        "def": "transform = GetVehicleTransform(vehicle)",
        "arguments": [
          {
            "name": "vehicle",
            "type": "number",
            "optional": false,
            "desc": "Vehicle handle"
          }
        ],
        "return": [
          {
            "name": "transform",
            "type": "table",
            "optional": false,
            "desc": "Transform of vehicle"
          }
        ],
        "info": "No Description",
        "example": "local t = GetVehicleTransform(vehicle)"
      },
      {
        "name": "GetVehicleBody",
        "def": "body = GetVehicleBody(vehicle)",
        "arguments": [
          {
            "name": "vehicle",
            "type": "number",
            "optional": false,
            "desc": "Vehicle handle"
          }
        ],
        "return": [
          {
            "name": "body",
            "type": "number",
            "optional": false,
            "desc": "Main body of vehicle"
          }
        ],
        "info": "No Description",
        "example": "local body = GetVehicleBody(vehicle)\nif IsBodyBroken(body) then\n--Vehicle body is broken\nend"
      },
      {
        "name": "GetVehicleHealth",
        "def": "health = GetVehicleHealth(vehicle)",
        "arguments": [
          {
            "name": "vehicle",
            "type": "number",
            "optional": false,
            "desc": "Vehicle handle"
          }
        ],
        "return": [
          {
            "name": "health",
            "type": "number",
            "optional": false,
            "desc": "Vehicle health (zero to one)"
          }
        ],
        "info": "No Description",
        "example": "local health = GetVehicleHealth(vehicle)"
      },
      {
        "name": "GetVehicleDriverPos",
        "def": "pos = GetVehicleDriverPos(vehicle)",
        "arguments": [
          {
            "name": "vehicle",
            "type": "number",
            "optional": false,
            "desc": "Vehicle handle"
          }
        ],
        "return": [
          {
            "name": "pos",
            "type": "table",
            "optional": false,
            "desc": "Driver position as vector in vehicle space"
          }
        ],
        "info": "No Description",
        "example": "local driverPos = GetVehicleDriverPos(vehicle)\nlocal t = GetVehicleTransform(vehicle)\nlocal worldPos = TransformToParentPoint(t, driverPos)"
      },
      {
        "name": "DriveVehicle",
        "def": "DriveVehicle(vehicle, drive, steering, handbrake)",
        "arguments": [
          {
            "name": "vehicle",
            "type": "number",
            "optional": false,
            "desc": "Vehicle handle"
          },
          {
            "name": "drive",
            "type": "number",
            "optional": false,
            "desc": "Reverse/forward control -1 to 1"
          },
          {
            "name": "steering",
            "type": "number",
            "optional": false,
            "desc": "Left/right control -1 to 1"
          },
          {
            "name": "handbrake",
            "type": "boolean",
            "optional": false,
            "desc": "Handbrake control"
          }
        ],
        "return": [],
        "info": "This function applies input to vehicles, allowing for autonomous driving. The vehicle\nwill be turned on automatically and turned off when no longer called. Call this from\nthe tick function, not update.",
        "example": "function tick()\n\t--Drive mycar forwards\n\tlocal v = FindVehicle(\"mycar\")\n\tDriveVehicle(v, 1, 0, false)\nend"
      }
    ]
  },
  {
    "category": "Player",
    "desc": "The player functions expose certain information about the player.",
    "functions": [
      {
        "name": "GetPlayerPos",
        "def": "position = GetPlayerPos()",
        "arguments": [],
        "return": [
          {
            "name": "position",
            "type": "table",
            "optional": false,
            "desc": "Player center position"
          }
        ],
        "info": "Return center point of player. This function is deprecated. \nUse GetPlayerTransform instead.",
        "example": "local p = GetPlayerPos()\n\n--This is equivalent to\np = VecAdd(GetPlayerTransform().pos, Vec(0,1,0))"
      },
      {
        "name": "GetPlayerTransform",
        "def": "transform = GetPlayerTransform()",
        "arguments": [],
        "return": [
          {
            "name": "transform",
            "type": "table",
            "optional": false,
            "desc": "Current player transform"
          }
        ],
        "info": "The player transform is located at the bottom of the player. The player transform\nconsiders heading (looking left and right). Forward is along negative Z axis. \nPlayer pitch (looking up and down) does not affect player transform. If you want\nthe transform of the eye, use GetCameraTransform() instead.",
        "example": "local t = GetPlayerTransform()"
      },
      {
        "name": "SetPlayerTransform",
        "def": "SetPlayerTransform(transform)",
        "arguments": [
          {
            "name": "transform",
            "type": "table",
            "optional": false,
            "desc": "Desired player transform"
          }
        ],
        "return": [],
        "info": "Instantly teleport the player to desired transform. Player velocity\nand up/down look angle will be set to zero during this process.",
        "example": "local t = Transform(Vec(10, 0, 0), QuatEuler(0, 90, 0))\nSetPlayerTransform(t)"
      },
      {
        "name": "SetPlayerSpawnTransform",
        "def": "SetPlayerSpawnTransform(transform)",
        "arguments": [
          {
            "name": "transform",
            "type": "table",
            "optional": false,
            "desc": "Desired player spawn transform"
          }
        ],
        "return": [],
        "info": "Call this function during init to alter the player spawn transform.",
        "example": "local t = Transform(Vec(10, 0, 0), QuatEuler(0, 90, 0))\nSetPlayerSpawnTransform(t)"
      },
      {
        "name": "GetPlayerVelocity",
        "def": "velocity = GetPlayerVelocity()",
        "arguments": [],
        "return": [
          {
            "name": "velocity",
            "type": "table",
            "optional": false,
            "desc": "Player velocity in world space as vector"
          }
        ],
        "info": "No Description",
        "example": "local vel = GetPlayerVelocity()"
      },
      {
        "name": "SetPlayerVehicle",
        "def": "SetPlayerVehicle(vehicle)",
        "arguments": [
          {
            "name": "vehicle",
            "type": "value",
            "optional": false,
            "desc": "Handle to vehicle or zero to not drive."
          }
        ],
        "return": [],
        "info": "Drive specified vehicle.",
        "example": "local car = FindVehicle(\"mycar\")\nSetPlayerVehicle(car)"
      },
      {
        "name": "SetPlayerVelocity",
        "def": "SetPlayerVelocity(velocity)",
        "arguments": [
          {
            "name": "velocity",
            "type": "table",
            "optional": false,
            "desc": "Player velocity in world space as vector"
          }
        ],
        "return": [],
        "info": "No Description",
        "example": "SetPlayerVelocity(Vec(0, 5, 0))"
      },
      {
        "name": "GetPlayerVehicle",
        "def": "handle = GetPlayerVehicle()",
        "arguments": [],
        "return": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Current vehicle handle, or zero if not in vehicle"
          }
        ],
        "info": "No Description",
        "example": "local vehicle = GetPlayerVehicle()\nif vehicle ~= 0 then\n\t...\nend"
      },
      {
        "name": "GetPlayerGrabShape",
        "def": "handle = GetPlayerGrabShape()",
        "arguments": [],
        "return": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Handle to grabbed shape or zero if not grabbing."
          }
        ],
        "info": "No Description",
        "example": "local shape = GetPlayerGrabShape()\nif shape ~= 0 then\n\t...\nend"
      },
      {
        "name": "GetPlayerGrabBody",
        "def": "handle = GetPlayerGrabBody()",
        "arguments": [],
        "return": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Handle to grabbed body or zero if not grabbing."
          }
        ],
        "info": "No Description",
        "example": "local body = GetPlayerGrabBody()\nif body ~= 0 then\n\t...\nend"
      },
      {
        "name": "GetPlayerPickShape",
        "def": "handle = GetPlayerPickShape()",
        "arguments": [],
        "return": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Handle to picked shape or zero if nothing is picked"
          }
        ],
        "info": "No Description",
        "example": "local shape = GetPlayerPickShape()\nif shape ~= 0 then\n\t...\nend"
      },
      {
        "name": "GetPlayerPickBody",
        "def": "handle = GetPlayerPickBody()",
        "arguments": [],
        "return": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Handle to picked body or zero if nothing is picked"
          }
        ],
        "info": "No Description",
        "example": "local body = GetPlayerPickBody()\nif body ~= 0 then\n\t...\nend"
      },
      {
        "name": "GetPlayerInteractShape",
        "def": "handle = GetPlayerInteractShape()",
        "arguments": [],
        "return": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Handle to interactable shape or zero"
          }
        ],
        "info": "Interactable shapes has to be tagged with \"interact\". The engine\ndetermines which interactable shape is currently interactable.",
        "example": "local shape = GetPlayerInteractShape()\nif shape ~= 0 then\n\t...\nend"
      },
      {
        "name": "GetPlayerInteractBody",
        "def": "handle = GetPlayerInteractBody()",
        "arguments": [],
        "return": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Handle to interactable body or zero"
          }
        ],
        "info": "Interactable shapes has to be tagged with \"interact\". The engine\ndetermines which interactable body is currently interactable.",
        "example": "local body = GetPlayerInteractBody()\nif body ~= 0 then\n\t...\nend"
      },
      {
        "name": "SetPlayerScreen",
        "def": "SetPlayerScreen(handle)",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Handle to screen or zero for no screen"
          }
        ],
        "return": [],
        "info": "Set the screen the player should interact with. For the screen\nto feature a mouse pointer and receieve input, the screen also\nneeds to have interactive property.",
        "example": "--Interact with screen\nSetPlayerScreen(screen)\n\n--Do not interact with screen\nSetPlayerScreen(0)"
      },
      {
        "name": "GetPlayerScreen",
        "def": "handle = GetPlayerScreen()",
        "arguments": [],
        "return": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Handle to interacted screen or zero if none"
          }
        ],
        "info": "No Description",
        "example": "--Interact with screen\nlocal screen = GetPlayerScreen()"
      },
      {
        "name": "SetPlayerHealth",
        "def": "SetPlayerHealth(health)",
        "arguments": [
          {
            "name": "health",
            "type": "number",
            "optional": false,
            "desc": "Set player health (between zero and one)"
          }
        ],
        "return": [],
        "info": "No Description",
        "example": "SetPlayerHealth(0.5)"
      },
      {
        "name": "GetPlayerHealth",
        "def": "health = GetPlayerHealth()",
        "arguments": [],
        "return": [
          {
            "name": "health",
            "type": "number",
            "optional": false,
            "desc": "Current player health"
          }
        ],
        "info": "No Description",
        "example": "local health = GetPlayerHealth()"
      },
      {
        "name": "RespawnPlayer",
        "def": "RespawnPlayer()",
        "arguments": [],
        "return": [],
        "info": "Respawn player at spawn position without modifying the scene",
        "example": "RespawnPlayer()"
      }
    ]
  },
  {
    "category": "Sound",
    "desc": "Sound functions are used for playing sounds or loops in the world. There sound functions are alwyas positioned and will be affected by acoustics simulation. If you want to play dry sounds without acoustics you should use UiSound and UiSoundLoop in the User Interface section.",
    "functions": [
      {
        "name": "LoadSound",
        "def": "handle = LoadSound(path)",
        "arguments": [
          {
            "name": "path",
            "type": "string",
            "optional": false,
            "desc": "Path to ogg sound file"
          }
        ],
        "return": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Sound handle"
          }
        ],
        "info": "No Description",
        "example": "local snd = LoadSound(\"beep.ogg\")"
      },
      {
        "name": "LoadLoop",
        "def": "handle = LoadLoop(path)",
        "arguments": [
          {
            "name": "path",
            "type": "string",
            "optional": false,
            "desc": "Path to ogg sound file"
          }
        ],
        "return": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Loop handle"
          }
        ],
        "info": "No Description",
        "example": "local loop = LoadLoop(\"siren.ogg\")"
      },
      {
        "name": "PlaySound",
        "def": "PlaySound(handle, [pos], [volume])",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Sound handle"
          },
          {
            "name": "pos",
            "type": "table",
            "optional": true,
            "desc": "World position as vector. Default is player position."
          },
          {
            "name": "volume",
            "type": "number",
            "optional": true,
            "desc": "Playback volume. Default is 1.0"
          }
        ],
        "return": [],
        "info": "No Description",
        "example": "function init()\n\tsnd = LoadSound(\"beep.ogg\")\nend\n\nfunction tick()\n\tif trigSound then\n\t\tlocal pos = Vec(100, 0, 0)\n\t\tPlaySound(snd, pos, 0.5)\n\tend\nend"
      },
      {
        "name": "PlayLoop",
        "def": "PlayLoop(handle, [pos], [volume])",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Loop handle"
          },
          {
            "name": "pos",
            "type": "table",
            "optional": true,
            "desc": "World position as vector. Default is player position."
          },
          {
            "name": "volume",
            "type": "number",
            "optional": true,
            "desc": "Playback volume. Default is 1.0"
          }
        ],
        "return": [],
        "info": "Call this function continuously to play loop",
        "example": "function init()\n\tloop = LoadLoop(\"siren.ogg\")\nend\n\nfunction tick()\n\tlocal pos = Vec(100, 0, 0)\n\tPlayLoop(loop, pos, 0.5)\nend"
      },
      {
        "name": "PlayMusic",
        "def": "PlayMusic(path)",
        "arguments": [
          {
            "name": "path",
            "type": "string",
            "optional": false,
            "desc": "Music path"
          }
        ],
        "return": [],
        "info": "No Description",
        "example": "PlayMusic(\"MOD/music/background.ogg\")"
      },
      {
        "name": "StopMusic",
        "def": "StopMusic()",
        "arguments": [],
        "return": [],
        "info": "No Description",
        "example": "StopMusic()"
      }
    ]
  },
  {
    "category": "Sprite",
    "desc": "Sprites are 2D images in PNG or JPG format that can be drawn into the world. Sprites can be drawn with ot without depth test (occluded by geometry). Sprites will not be affected by lighting but they will go through post processing. If you want to display positioned information to the player as an overlay, you probably want to use the Ui functions in combination with UiWorldToPixel instead.",
    "functions": [
      {
        "name": "LoadSprite",
        "def": "handle = LoadSprite(path)",
        "arguments": [
          {
            "name": "path",
            "type": "string",
            "optional": false,
            "desc": "Path to sprite. Must be PNG or JPG format."
          }
        ],
        "return": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Sprite handle"
          }
        ],
        "info": "No Description",
        "example": "function init()\n\tarrow = LoadSprite(\"arrow.png\")\nend"
      },
      {
        "name": "DrawSprite",
        "def": "DrawSprite(handle, transform, width, height, r, g, b, a, [depthTest], [additive])",
        "arguments": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Sprite handle"
          },
          {
            "name": "transform",
            "type": "table",
            "optional": false,
            "desc": "Transform"
          },
          {
            "name": "width",
            "type": "number",
            "optional": false,
            "desc": "Width in meters"
          },
          {
            "name": "height",
            "type": "number",
            "optional": false,
            "desc": "Height in meters"
          },
          {
            "name": "r",
            "type": "number",
            "optional": false,
            "desc": "Red color"
          },
          {
            "name": "g",
            "type": "number",
            "optional": false,
            "desc": "Green color"
          },
          {
            "name": "b",
            "type": "number",
            "optional": false,
            "desc": "Blue color"
          },
          {
            "name": "a",
            "type": "number",
            "optional": false,
            "desc": "Alpha"
          },
          {
            "name": "depthTest",
            "type": "boolean",
            "optional": true,
            "desc": "Depth test enabled. Default false."
          },
          {
            "name": "additive",
            "type": "boolean",
            "optional": true,
            "desc": "Additive blending enabled. Default false."
          }
        ],
        "return": [],
        "info": "Draw sprite in world at next frame. Call this function from the tick callback.",
        "example": "function init()\n\tarrow = LoadSprite(\"arrow.ogg\")\nend\n\nfunction tick()\n\t--Draw sprite using transform\n\t--Size is two meters in width and height\n\t--Color is white, fully opaue\n\tlocal t = Transform(Vec(0, 10, 0), QuatEuler(0, GetTime(), 0))\n\tDrawSprite(arrow, t, 2, 2, 1, 1, 1, 1)\nend"
      }
    ]
  },
  {
    "category": "Scene queries",
    "desc": "Query the level in various ways.",
    "functions": [
      {
        "name": "QueryRequire",
        "def": "QueryRequire(layers)",
        "arguments": [
          {
            "name": "layers",
            "type": "string",
            "optional": false,
            "desc": "Space separate list of layers"
          }
        ],
        "return": [],
        "info": "Set required layers for next query. Available layers are:\n\nLayer  Description\nphysical\t have a physical representationdynamic\t\t part of a dynamic bodystatic\t\t part of a static bodylarge\t\t above debris thresholdsmall\t\t below debris threshold",
        "example": "--Raycast dynamic, physical objects above debris threshold, but not specific vehicle\nQueryRequire(\"physical dynamic large\")\nQueryRejectVehicle(vehicle)\nQueryRaycast(...)"
      },
      {
        "name": "QueryRejectVehicle",
        "def": "QueryRejectVehicle(vehicle)",
        "arguments": [
          {
            "name": "vehicle",
            "type": "number",
            "optional": false,
            "desc": "Vehicle handle"
          }
        ],
        "return": [],
        "info": "Exclude vehicle from the next query",
        "example": "--Do not include vehicle in next raycast\nQueryRejectVehicle(vehicle)\nQueryRaycast(...)"
      },
      {
        "name": "QueryRejectBody",
        "def": "QueryRejectBody(body)",
        "arguments": [
          {
            "name": "body",
            "type": "number",
            "optional": false,
            "desc": "Body handle"
          }
        ],
        "return": [],
        "info": "Exclude body from the next query",
        "example": "--Do not include body in next raycast\nQueryRejectBody(body)\nQueryRaycast(...)"
      },
      {
        "name": "QueryRejectShape",
        "def": "QueryRejectShape(shape)",
        "arguments": [
          {
            "name": "shape",
            "type": "number",
            "optional": false,
            "desc": "Shape handle"
          }
        ],
        "return": [],
        "info": "Exclude shape from the next query",
        "example": "--Do not include shape in next raycast\nQueryRejectShape(shape)\nQueryRaycast(...)"
      },
      {
        "name": "QueryRaycast",
        "def": "hit, dist, normal, shape = QueryRaycast(origin, direction, maxDist, [radius], [rejectTransparent])",
        "arguments": [
          {
            "name": "origin",
            "type": "table",
            "optional": false,
            "desc": "Raycast origin as world space vector"
          },
          {
            "name": "direction",
            "type": "table",
            "optional": false,
            "desc": "Unit length raycast direction as world space vector"
          },
          {
            "name": "maxDist",
            "type": "number",
            "optional": false,
            "desc": "Raycast maximum distance. Keep this as low as possible for good performance."
          },
          {
            "name": "radius",
            "type": "number",
            "optional": true,
            "desc": "Raycast thickness. Default zero."
          },
          {
            "name": "rejectTransparent",
            "type": "boolean",
            "optional": true,
            "desc": "Raycast through transparent materials. Default false."
          }
        ],
        "return": [
          {
            "name": "hit",
            "type": "boolean",
            "optional": false,
            "desc": "True if raycast hit something"
          },
          {
            "name": "dist",
            "type": "number",
            "optional": false,
            "desc": "Hit distance from origin"
          },
          {
            "name": "normal",
            "type": "table",
            "optional": false,
            "desc": "World space normal at hit point"
          },
          {
            "name": "shape",
            "type": "number",
            "optional": false,
            "desc": "Handle to hit shape"
          }
        ],
        "info": "This will perform a raycast or spherecast (if radius is more than zero) query.\nIf you want to set up a filter for the query you need to do so before every call\nto this function.",
        "example": "--Raycast from a high point straight downwards, excluding a specific vehicle\nQueryRejectVehicle(vehicle)\nlocal hit, d = QueryRaycast(Vec(0, 100, 0), Vec(0, -1, 0), 100)\nif hit then\n\t...hit something at distance d\nend"
      },
      {
        "name": "QueryClosestPoint",
        "def": "hit, point, normal, shape = QueryClosestPoint(origin, maxDist)",
        "arguments": [
          {
            "name": "origin",
            "type": "table",
            "optional": false,
            "desc": "World space point"
          },
          {
            "name": "maxDist",
            "type": "number",
            "optional": false,
            "desc": "Maximum distance. Keep this as low as possible for good performance."
          }
        ],
        "return": [
          {
            "name": "hit",
            "type": "boolean",
            "optional": false,
            "desc": "True if a point was found"
          },
          {
            "name": "point",
            "type": "table",
            "optional": false,
            "desc": "World space closest point"
          },
          {
            "name": "normal",
            "type": "table",
            "optional": false,
            "desc": "World space normal at closest point"
          },
          {
            "name": "shape",
            "type": "number",
            "optional": false,
            "desc": "Handle to closest shape"
          }
        ],
        "info": "This will query the closest point to all shapes in the world. If you \nwant to set up a filter for the query you need to do so before every call\nto this function.",
        "example": "--Find closest point within 10 meters of {0, 5, 0}, excluding any point on myVehicle\nQueryRejectVehicle(myVehicle)\nlocal hit, p, n, s = QueryClosestPoint(Vec(0, 5, 0), 10)\nif hit then\n\t--Point p of shape s is closest\nend"
      },
      {
        "name": "QueryAabbShapes",
        "def": "list = QueryAabbShapes(min, max)",
        "arguments": [
          {
            "name": "min",
            "type": "table",
            "optional": false,
            "desc": "Aabb minimum point"
          },
          {
            "name": "max",
            "type": "table",
            "optional": false,
            "desc": "Aabb maximum point"
          }
        ],
        "return": [
          {
            "name": "list",
            "type": "table",
            "optional": false,
            "desc": "Indexed table with handles to all shapes in the aabb"
          }
        ],
        "info": "Return all shapes within the provided world space, axis-aligned bounding box",
        "example": "local list = QeueryAabbShapes(Vec(0, 0, 0), Vec(10, 10, 10))\nfor i=1, #list do\n\tlocal shape = list[i]\n\t..\nend"
      },
      {
        "name": "QueryAabbBodies",
        "def": "list = QueryAabbBodies(min, max)",
        "arguments": [
          {
            "name": "min",
            "type": "table",
            "optional": false,
            "desc": "Aabb minimum point"
          },
          {
            "name": "max",
            "type": "table",
            "optional": false,
            "desc": "Aabb maximum point"
          }
        ],
        "return": [
          {
            "name": "list",
            "type": "table",
            "optional": false,
            "desc": "Indexed table with handles to all bodies in the aabb"
          }
        ],
        "info": "Return all bodies within the provided world space, axis-aligned bounding box",
        "example": "local list = QeueryAabbBodies(Vec(0, 0, 0), Vec(10, 10, 10))\nfor i=1, #list do\n\tlocal body = list[i]\n\t..\nend"
      },
      {
        "name": "GetLastSound",
        "def": "volume, position = GetLastSound()",
        "arguments": [],
        "return": [
          {
            "name": "volume",
            "type": "number",
            "optional": false,
            "desc": "Volume of loudest sound played last frame"
          },
          {
            "name": "position",
            "type": "table",
            "optional": false,
            "desc": "World position of loudest sound played last frame"
          }
        ],
        "info": "No Description",
        "example": "local vol, pos = GetLastSound()"
      },
      {
        "name": "IsPointInWater",
        "def": "inWater, depth = IsPointInWater(point)",
        "arguments": [
          {
            "name": "point",
            "type": "table",
            "optional": false,
            "desc": "World point as vector"
          }
        ],
        "return": [
          {
            "name": "inWater",
            "type": "boolean",
            "optional": false,
            "desc": "True if point is in water"
          },
          {
            "name": "depth",
            "type": "number",
            "optional": false,
            "desc": "Depth of point into water, or zero if not in water"
          }
        ],
        "info": "No Description",
        "example": "local wet, d = IsPointInWater(Vec(10, 0, 0))\nif wet then\n\t...point d meters into water\nend"
      }
    ]
  },
  {
    "category": "Miscellaneous",
    "desc": "Functions of peripheral nature that doesn't fit in anywhere else",
    "functions": [
      {
        "name": "Shoot",
        "def": "Shoot(origin, direction, [type])",
        "arguments": [
          {
            "name": "origin",
            "type": "table",
            "optional": false,
            "desc": "Origin in world space as vector"
          },
          {
            "name": "direction",
            "type": "table",
            "optional": false,
            "desc": "Unit length direction as world space vector"
          },
          {
            "name": "type",
            "type": "number",
            "optional": true,
            "desc": "0 is regular bullet (default) and 1 is rocket"
          }
        ],
        "return": [],
        "info": "Shoot bullet or rocket (used for chopper)",
        "example": "Shoot(Vec(0, 10, 0), Vec(0, 0, 1))"
      },
      {
        "name": "MakeHole",
        "def": "MakeHole(position, r0, [r1], [r2], [silent])",
        "arguments": [
          {
            "name": "position",
            "type": "table",
            "optional": false,
            "desc": "Hole center point"
          },
          {
            "name": "r0",
            "type": "number",
            "optional": false,
            "desc": "Hole radius for soft materials"
          },
          {
            "name": "r1",
            "type": "number",
            "optional": true,
            "desc": "Hole radius for medium materials. May not be bigger than r0. Default zero."
          },
          {
            "name": "r2",
            "type": "number",
            "optional": true,
            "desc": "Hole radius for hard materials. May not be bigger than r1. Default zero."
          },
          {
            "name": "silent",
            "type": "boolean",
            "optional": true,
            "desc": "Make hole without playing any break sounds."
          }
        ],
        "return": [],
        "info": "Make a hole in the environment. Radius is given in meters. \nSoft materials: glass, foliage, dirt, wood, plaster and plastic. \nMedium materials: concrete, brick and weak metal. \nHard materials: hard metal and hard masonry.",
        "example": "MakeHole(pos, 1.2, 1.0)"
      },
      {
        "name": "Explosion",
        "def": "Explosion(pos, size)",
        "arguments": [
          {
            "name": "pos",
            "type": "table",
            "optional": false,
            "desc": "Position in world space as vector"
          },
          {
            "name": "size",
            "type": "number",
            "optional": false,
            "desc": "Explosion size from 0.5 to 4.0"
          }
        ],
        "return": [],
        "info": "No Description",
        "example": "Explosion(Vec(0, 10, 0), 1)"
      },
      {
        "name": "SpawnParticle",
        "def": "SpawnParticle(type, origin, velocity, size, life)",
        "arguments": [
          {
            "name": "type",
            "type": "string",
            "optional": false,
            "desc": "Type of particle: \"smoke\", \"darksmoke\", \"fire\" or \"water\""
          },
          {
            "name": "origin",
            "type": "table",
            "optional": false,
            "desc": "Origon in world space as vector"
          },
          {
            "name": "velocity",
            "type": "table",
            "optional": false,
            "desc": "Velocity in world space as vector (m/s)"
          },
          {
            "name": "size",
            "type": "number",
            "optional": false,
            "desc": "Size of particle (meters)"
          },
          {
            "name": "life",
            "type": "number",
            "optional": false,
            "desc": "Lifetime of particle (seconds)"
          }
        ],
        "return": [],
        "info": "No Description",
        "example": "SpawnParticle(\"smoke\", Vec(0, 10, 0), Vec(0, 1, 0), 2, 5)"
      },
      {
        "name": "SpawnFire",
        "def": "SpawnFire(pos)",
        "arguments": [
          {
            "name": "pos",
            "type": "table",
            "optional": false,
            "desc": "Position in world space as vector"
          }
        ],
        "return": [],
        "info": "No Description",
        "example": "SpawnFire(Vec(0, 10, 0))"
      },
      {
        "name": "GetFireCount",
        "def": "count = GetFireCount()",
        "arguments": [],
        "return": [
          {
            "name": "count",
            "type": "number",
            "optional": false,
            "desc": "Number of active fires in level"
          }
        ],
        "info": "No Description",
        "example": "local c = GetFireCount()"
      },
      {
        "name": "GetCameraTransform",
        "def": "transform = GetCameraTransform()",
        "arguments": [],
        "return": [
          {
            "name": "transform",
            "type": "table",
            "optional": false,
            "desc": "Current camera transform"
          }
        ],
        "info": "No Description",
        "example": "local t = GetCameraTransform()"
      },
      {
        "name": "SetCameraTransform",
        "def": "SetCameraTransform(transform, [fov])",
        "arguments": [
          {
            "name": "transform",
            "type": "table",
            "optional": false,
            "desc": "Desired camera transform"
          },
          {
            "name": "fov",
            "type": "number",
            "optional": true,
            "desc": "Optional horizontal field of view in degrees (default: 90)"
          }
        ],
        "return": [],
        "info": "Override current camera transform for this frame. Call continuously to keep overriding.",
        "example": "SetCameraTransform(Transform(Vec(0, 10, 0), QuatEuler(0, 90, 0)))"
      },
      {
        "name": "DebugLine",
        "def": "DebugLine(p0, p1, [r], [g], [b], [a])",
        "arguments": [
          {
            "name": "p0",
            "type": "table",
            "optional": false,
            "desc": "World space point as vector"
          },
          {
            "name": "p1",
            "type": "table",
            "optional": false,
            "desc": "World space point as vector"
          },
          {
            "name": "r",
            "type": "number",
            "optional": true,
            "desc": "Red"
          },
          {
            "name": "g",
            "type": "number",
            "optional": true,
            "desc": "Green"
          },
          {
            "name": "b",
            "type": "number",
            "optional": true,
            "desc": "Blue"
          },
          {
            "name": "a",
            "type": "number",
            "optional": true,
            "desc": "Alpha"
          }
        ],
        "return": [],
        "info": "Draw a debug line in the world. Default color is white.",
        "example": "--Draw white debug line\nDebugLine(Vec(0, 0, 0), Vec(-10, 5, -10))\n\n--Draw red debug line\nDebugLine(Vec(0, 0, 0), Vec(10, 5, 10), 1, 0, 0)"
      },
      {
        "name": "DebugCross",
        "def": "DebugCross(p0, [r], [g], [b], [a])",
        "arguments": [
          {
            "name": "p0",
            "type": "table",
            "optional": false,
            "desc": "World space point as vector"
          },
          {
            "name": "r",
            "type": "number",
            "optional": true,
            "desc": "Red"
          },
          {
            "name": "g",
            "type": "number",
            "optional": true,
            "desc": "Green"
          },
          {
            "name": "b",
            "type": "number",
            "optional": true,
            "desc": "Blue"
          },
          {
            "name": "a",
            "type": "number",
            "optional": true,
            "desc": "Alpha"
          }
        ],
        "return": [],
        "info": "Draw a debug cross in the world to highlight a location. Default color is white.",
        "example": "DebugCross(Vec(10, 5, 5))"
      },
      {
        "name": "DebugWatch",
        "def": "DebugWatch(name, value)",
        "arguments": [
          {
            "name": "name",
            "type": "string",
            "optional": false,
            "desc": "Name"
          },
          {
            "name": "value",
            "type": "string",
            "optional": false,
            "desc": "Value"
          }
        ],
        "return": [],
        "info": "Show a named valued on screen for debug purposes.\nUp to 32 values can be shown simultaneously. Values updated the current\nframe are drawn opaque. Old values are drawn transparent in white.\nThe function will also recognize vectors, quaternions and transforms as\nsecond argument and convert them to strings automatically.",
        "example": "local t = 5\nDebugWatch(\"time\", t)"
      },
      {
        "name": "DebugPrint",
        "def": "DebugPrint(message)",
        "arguments": [
          {
            "name": "message",
            "type": "string",
            "optional": false,
            "desc": "Message to display"
          }
        ],
        "return": [],
        "info": "Display message on screen. The last 20 lines are displayed.",
        "example": "DebugPrint(\"time\")"
      }
    ]
  },
  {
    "category": "User Interface",
    "desc": "The user interface functions are used for drawing interactive 2D graphics and can only be called from the draw function of a script. The ui functions are designed with the immediate mode gui paradigm in mind and uses a cursor and state stack. Pushing and popping the stack is cheap and designed to be called often.",
    "functions": [
      {
        "name": "UiMakeInteractive",
        "def": "UiMakeInteractive()",
        "arguments": [],
        "return": [],
        "info": "Calling this function will disable game input, bring up the mouse pointer\nand allow Ui interaction with the calling script without pausing the game.\nThis can be useful to make interactive user interfaces from scripts while\nthe game is running. Call this continuously every frame as long as Ui \ninteraction is desired.",
        "example": "UiMakeInteractive()"
      },
      {
        "name": "UiPush",
        "def": "UiPush()",
        "arguments": [],
        "return": [],
        "info": "Push state onto stack. This is used in combination with UiPop to\nremember a state and restore to that state later.",
        "example": "UiColor(1,0,0)\nUiText(\"Red\")\nUiPush()\n\tUiColor(0,1,0)\n\tUiText(\"Green\")\nUiPop()\nUiText(\"Red\")"
      },
      {
        "name": "UiPop",
        "def": "UiPop()",
        "arguments": [],
        "return": [],
        "info": "Pop state from stack and make it the current one. This is used in\ncombination with UiPush to remember a previous state and go back to\nit later.",
        "example": "UiColor(1,0,0)\nUiText(\"Red\")\nUiPush()\n\tUiColor(0,1,0)\n\tUiText(\"Green\")\nUiPop()\nUiText(\"Red\")"
      },
      {
        "name": "UiWidth",
        "def": "width = UiWidth()",
        "arguments": [],
        "return": [
          {
            "name": "width",
            "type": "number",
            "optional": false,
            "desc": "Width of draw context"
          }
        ],
        "info": "No Description",
        "example": "local w = UiWidth()"
      },
      {
        "name": "UiHeight",
        "def": "height = UiHeight()",
        "arguments": [],
        "return": [
          {
            "name": "height",
            "type": "number",
            "optional": false,
            "desc": "Height of draw context"
          }
        ],
        "info": "No Description",
        "example": "local h = UiHeight()"
      },
      {
        "name": "UiCenter",
        "def": "center = UiCenter()",
        "arguments": [],
        "return": [
          {
            "name": "center",
            "type": "number",
            "optional": false,
            "desc": "Half width of draw context"
          }
        ],
        "info": "No Description",
        "example": "local c = UiCenter()\n--Same as \nlocal c = UiWidth()/2"
      },
      {
        "name": "UiMiddle",
        "def": "middle = UiMiddle()",
        "arguments": [],
        "return": [
          {
            "name": "middle",
            "type": "number",
            "optional": false,
            "desc": "Half height of draw context"
          }
        ],
        "info": "No Description",
        "example": "local m = UiMiddle()\n--Same as\nlocal m = UiHeight()/2"
      },
      {
        "name": "UiColor",
        "def": "UiColor(r, g, b, [a])",
        "arguments": [
          {
            "name": "r",
            "type": "number",
            "optional": false,
            "desc": "Red channel"
          },
          {
            "name": "g",
            "type": "number",
            "optional": false,
            "desc": "Green channel"
          },
          {
            "name": "b",
            "type": "number",
            "optional": false,
            "desc": "Blue channel"
          },
          {
            "name": "a",
            "type": "number",
            "optional": true,
            "desc": "Alpha channel. Default 1.0"
          }
        ],
        "return": [],
        "info": "No Description",
        "example": "--Set color yellow\nUiColor(1,1,0)"
      },
      {
        "name": "UiColorFilter",
        "def": "UiColorFilter(r, g, b, [a])",
        "arguments": [
          {
            "name": "r",
            "type": "number",
            "optional": false,
            "desc": "Red channel"
          },
          {
            "name": "g",
            "type": "number",
            "optional": false,
            "desc": "Green channel"
          },
          {
            "name": "b",
            "type": "number",
            "optional": false,
            "desc": "Blue channel"
          },
          {
            "name": "a",
            "type": "number",
            "optional": true,
            "desc": "Alpha channel. Default 1.0"
          }
        ],
        "return": [],
        "info": "Color filter, multiplied to all future colors in this scope",
        "example": "UiPush()\n\t--Draw menu in transparent, yellow color tint\n\tUiColorFilter(1, 1, 0, 0.5)\n\tdrawMenu()\nUiPop()"
      },
      {
        "name": "UiTranslate",
        "def": "UiTranslate(x, y)",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "optional": false,
            "desc": "X component"
          },
          {
            "name": "y",
            "type": "number",
            "optional": false,
            "desc": "Y component"
          }
        ],
        "return": [],
        "info": "Translate cursor",
        "example": "UiPush()\n\tUiTranslate(100, 0)\n\tUiText(\"Indented\")\nUiPop()"
      },
      {
        "name": "UiRotate",
        "def": "UiRotate(angle)",
        "arguments": [
          {
            "name": "angle",
            "type": "number",
            "optional": false,
            "desc": "Angle in degrees, counter clockwise"
          }
        ],
        "return": [],
        "info": "Rotate cursor",
        "example": "UiPush()\n\tUiRotate(45)\n\tUiText(\"Rotated\")\nUiPop()"
      },
      {
        "name": "UiScale",
        "def": "UiScale(x, [y])",
        "arguments": [
          {
            "name": "x",
            "type": "number",
            "optional": false,
            "desc": "X component"
          },
          {
            "name": "y",
            "type": "number",
            "optional": true,
            "desc": "Y component. Default value is x."
          }
        ],
        "return": [],
        "info": "Scale cursor either uniformly (one argument) or non-uniformly (two arguments)",
        "example": "UiPush()\n\tUiScale(2)\n\tUiText(\"Double size\")\nUiPop()"
      },
      {
        "name": "UiWindow",
        "def": "UiWindow(width, height, [clip])",
        "arguments": [
          {
            "name": "width",
            "type": "number",
            "optional": false,
            "desc": "Window width"
          },
          {
            "name": "height",
            "type": "number",
            "optional": false,
            "desc": "Window height"
          },
          {
            "name": "clip",
            "type": "boolean",
            "optional": true,
            "desc": "Clip content outside window. Default is false."
          }
        ],
        "return": [],
        "info": "Set up new bounds. Calls to UiWidth, UiHeight, UiCenter and UiMiddle\nwill operate in the context of the window size. \nIf clip is set to true, contents of window will be clipped to \nbounds (only works properly for non-rotated windows).",
        "example": "UiPush()\n\tUiWindow(400, 200)\n\tlocal w = UiWidth()\n\t--w is now 400\nUiPop()"
      },
      {
        "name": "UiSafeMargins",
        "def": "x0, y0, x1, y1 = UiSafeMargins()",
        "arguments": [],
        "return": [
          {
            "name": "x0",
            "type": "number",
            "optional": false,
            "desc": "Left"
          },
          {
            "name": "y0",
            "type": "number",
            "optional": false,
            "desc": "Top"
          },
          {
            "name": "x1",
            "type": "number",
            "optional": false,
            "desc": "Right"
          },
          {
            "name": "y1",
            "type": "number",
            "optional": false,
            "desc": "Bottom"
          }
        ],
        "info": "Return a safe drawing area that will always be visible regardless of\ndisplay aspect ratio. The safe drawing area will always be 1920 by 1080\nin size. This is useful for setting up a fixed size UI.",
        "example": "function draw()\n\tlocal x0, y0, x1, y1 = UiSafeMargins()\n\tUiTranslate(x0, y0)\n\tUiWindow(x1-x0, y1-y0, true)\n\t--The drawing area is now 1920 by 1080 in the center of screen\n\tdrawMenu()\nend"
      },
      {
        "name": "UiAlign",
        "def": "UiAlign(alignment)",
        "arguments": [
          {
            "name": "alignment",
            "type": "string",
            "optional": false,
            "desc": "Alignment keywords"
          }
        ],
        "return": [],
        "info": "The alignment determines how content is aligned with respect to the\ncursor.\n\nAlignment  Description\nleft\t Horizontally align to the leftright\t Horizontally align to the rightcenter\t Horizontally align to the centertop\t\t Vertically align to the topbottom\t Veritcally align to the bottommiddle\t Vertically align to the middle",
        "example": "UiAlign(\"left\")\nUiText(\"Aligned left at baseline\")\n\nUiAlign(\"center middle\")\nUiText(\"Fully centered\")"
      },
      {
        "name": "UiModalBegin",
        "def": "UiModalBegin()",
        "arguments": [],
        "return": [],
        "info": "Disable input for everything, except what's between UiModalBegin and UiModalEnd",
        "example": "UiModalBegin()\nif UiTextButton(\"Okay\") then\n\t--All other interactive ui elements except this one are disabled\nend\nUiModalEnd()"
      },
      {
        "name": "UiModalEnd",
        "def": "UiModalEnd()",
        "arguments": [],
        "return": [],
        "info": "Disable input for everything, except what's between UiModalBegin and UiModalEnd",
        "example": "UiModalBegin()\nif UiTextButton(\"Okay\") then\n\t--All other interactive ui elements except this one are disabled\nend\nUiModalEnd()"
      },
      {
        "name": "UiDisableInput",
        "def": "UiDisableInput()",
        "arguments": [],
        "return": [],
        "info": "Disable input",
        "example": "UiPush()\n\tUiDisableInput()\n\tif UiButtonText(\"Okay\") then\n\t\t--Will never happen\n\tend\nUiPop()"
      },
      {
        "name": "UiEnableInput",
        "def": "UiEnableInput()",
        "arguments": [],
        "return": [],
        "info": "Enable input that has been previously disabled",
        "example": "UiDisableInput()\nif UiButtonText(\"Okay\") then\n\t--Will never happen\nend\n\nUiEnableInput()\nif UiButtonText(\"Okay\") then\n\t--This can happen\nend"
      },
      {
        "name": "UiGetMousePos",
        "def": "x, y = UiGetMousePos()",
        "arguments": [],
        "return": [
          {
            "name": "x",
            "type": "number",
            "optional": false,
            "desc": "X coordinate"
          },
          {
            "name": "y",
            "type": "number",
            "optional": false,
            "desc": "Y coordinate"
          }
        ],
        "info": "Get mouse pointer position relative to the cursor",
        "example": "local x, y = UiGetMousePos()"
      },
      {
        "name": "UiIsMouseInRect",
        "def": "inside = UiIsMouseInRect(w, h)",
        "arguments": [
          {
            "name": "w",
            "type": "number",
            "optional": false,
            "desc": "Width"
          },
          {
            "name": "h",
            "type": "number",
            "optional": false,
            "desc": "Height"
          }
        ],
        "return": [
          {
            "name": "inside",
            "type": "boolean",
            "optional": false,
            "desc": "True if mouse pointer is within rectangle"
          }
        ],
        "info": "Check if mouse pointer is within rectangle. Note that this function respects\nalignment.",
        "example": "if UiIsMouseInRect(100, 100) then\n\t-- mouse pointer is in rectangle\nend"
      },
      {
        "name": "UiWorldToPixel",
        "def": "x, y, distance = UiWorldToPixel(point)",
        "arguments": [
          {
            "name": "point",
            "type": "table",
            "optional": false,
            "desc": "3D world position as vector"
          }
        ],
        "return": [
          {
            "name": "x",
            "type": "number",
            "optional": false,
            "desc": "X coordinate"
          },
          {
            "name": "y",
            "type": "number",
            "optional": false,
            "desc": "Y coordinate"
          },
          {
            "name": "distance",
            "type": "number",
            "optional": false,
            "desc": "Distance to point"
          }
        ],
        "info": "Convert world space position to user interface X and Y coordinate relative\nto the cursor. The distance is in meters and positive if in front of camera,\nnegative otherwise.",
        "example": "local x, y, dist = UiWorldToPixel(point)\nif dist > 0 then\n\tUiTranslate(x, y)\n\tUiText(\"Label\")\nend"
      },
      {
        "name": "UiBlur",
        "def": "UiBlur(amount)",
        "arguments": [
          {
            "name": "amount",
            "type": "number",
            "optional": false,
            "desc": "Blur amount (0.0 to 1.0)"
          }
        ],
        "return": [],
        "info": "Perform a gaussian blur on current screen content",
        "example": "UiBlur(1.0)\ndrawMenu()"
      },
      {
        "name": "UiFont",
        "def": "UiFont(path, size)",
        "arguments": [
          {
            "name": "path",
            "type": "string",
            "optional": false,
            "desc": "Path to TTF font file"
          },
          {
            "name": "size",
            "type": "number",
            "optional": false,
            "desc": "Font size (10 to 100)"
          }
        ],
        "return": [],
        "info": "No Description",
        "example": "UiFont(\"bold.ttf\", 24)\nUiText(\"Hello\")"
      },
      {
        "name": "UiFontHeight",
        "def": "size = UiFontHeight()",
        "arguments": [],
        "return": [
          {
            "name": "size",
            "type": "number",
            "optional": false,
            "desc": "Font size"
          }
        ],
        "info": "No Description",
        "example": "local h = UiFontHeight()"
      },
      {
        "name": "UiText",
        "def": "w, h = UiText(text, [move])",
        "arguments": [
          {
            "name": "text",
            "type": "string",
            "optional": false,
            "desc": "Print text at cursor location"
          },
          {
            "name": "move",
            "type": "boolean",
            "optional": true,
            "desc": "Automatically move cursor vertically. Default false."
          }
        ],
        "return": [
          {
            "name": "w",
            "type": "number",
            "optional": false,
            "desc": "Width of text"
          },
          {
            "name": "h",
            "type": "number",
            "optional": false,
            "desc": "Height of text"
          }
        ],
        "info": "No Description",
        "example": "UiFont(\"bold.ttf\", 24)\nUiText(\"Hello\")\n\n...\n\n--Automatically advance cursor\nUiText(\"First line\", true)\nUiText(\"Second line\", true)"
      },
      {
        "name": "UiGetTextSize",
        "def": "w, h = UiGetTextSize(text)",
        "arguments": [
          {
            "name": "text",
            "type": "string",
            "optional": false,
            "desc": "A text string"
          }
        ],
        "return": [
          {
            "name": "w",
            "type": "number",
            "optional": false,
            "desc": "Width of text"
          },
          {
            "name": "h",
            "type": "number",
            "optional": false,
            "desc": "Height of text"
          }
        ],
        "info": "No Description",
        "example": "local w, h = GetTextSize(\"Some text\")"
      },
      {
        "name": "UiWordWrap",
        "def": "UiWordWrap(width)",
        "arguments": [
          {
            "name": "width",
            "type": "number",
            "optional": false,
            "desc": "Maximum width of text"
          }
        ],
        "return": [],
        "info": "No Description",
        "example": "UiWordWrap(200)\nUiText(\"Some really long text that will get wrapped into several lines\")"
      },
      {
        "name": "UiTextOutline",
        "def": "UiTextOutline(r, g, b, a, [thickness])",
        "arguments": [
          {
            "name": "r",
            "type": "number",
            "optional": false,
            "desc": "Red channel"
          },
          {
            "name": "g",
            "type": "number",
            "optional": false,
            "desc": "Green channel"
          },
          {
            "name": "b",
            "type": "number",
            "optional": false,
            "desc": "Blue channel"
          },
          {
            "name": "a",
            "type": "number",
            "optional": false,
            "desc": "Alpha channel"
          },
          {
            "name": "thickness",
            "type": "number",
            "optional": true,
            "desc": "Outline thickness. Default is 0.1"
          }
        ],
        "return": [],
        "info": "No Description",
        "example": "--Black outline, standard thickness\nUiTextOutline(0,0,0,1)\nUiText(\"Text with outline\")"
      },
      {
        "name": "UiTextShadow",
        "def": "UiTextShadow(r, g, b, a, [distance], [blur])",
        "arguments": [
          {
            "name": "r",
            "type": "number",
            "optional": false,
            "desc": "Red channel"
          },
          {
            "name": "g",
            "type": "number",
            "optional": false,
            "desc": "Green channel"
          },
          {
            "name": "b",
            "type": "number",
            "optional": false,
            "desc": "Blue channel"
          },
          {
            "name": "a",
            "type": "number",
            "optional": false,
            "desc": "Alpha channel"
          },
          {
            "name": "distance",
            "type": "number",
            "optional": true,
            "desc": "Shadow distance. Default is 1.0"
          },
          {
            "name": "blur",
            "type": "number",
            "optional": true,
            "desc": "Shadow blur. Default is 0.5"
          }
        ],
        "return": [],
        "info": "No Description",
        "example": "--Black drop shadow, 50% transparent, distance 2\nUiTextShadow(0, 0, 0, 0.5, 2.0)\nUiText(\"Text with drop shadow\")"
      },
      {
        "name": "UiRect",
        "def": "UiRect(w, h)",
        "arguments": [
          {
            "name": "w",
            "type": "number",
            "optional": false,
            "desc": "Width"
          },
          {
            "name": "h",
            "type": "number",
            "optional": false,
            "desc": "Height"
          }
        ],
        "return": [],
        "info": "Draw solid rectangle at cursor position",
        "example": "--Draw full-screen black rectangle\nUiColor(0, 0, 0)\nUiRect(UiWidth(), UiHeight())\n\n--Draw smaller, red, rotating rectangle in center of screen\nUiPush()\n\tUiColor(1, 0, 0)\n\tUiTranslate(UiCenter(), UiMiddle())\n\tUiRotate(GetTime())\n\tUiAlign(\"center middle\")\n\tUiRect(100, 100)\nUiPop()"
      },
      {
        "name": "UiImage",
        "def": "w, h = UiImage(path)",
        "arguments": [
          {
            "name": "path",
            "type": "string",
            "optional": false,
            "desc": "Path to image (PNG or JPG format)"
          }
        ],
        "return": [
          {
            "name": "w",
            "type": "number",
            "optional": false,
            "desc": "Image width"
          },
          {
            "name": "h",
            "type": "number",
            "optional": false,
            "desc": "Image height"
          }
        ],
        "info": "Draw image at cursor position",
        "example": "--Draw image in center of screen\nUiPush()\n\tUiTranslate(UiCenter(), UiMiddle())\n\tUiAlign(\"center middle\")\n\tUiImage(\"test.png\")\nUiPop()"
      },
      {
        "name": "UiGetImageSize",
        "def": "w, h = UiGetImageSize(path)",
        "arguments": [
          {
            "name": "path",
            "type": "string",
            "optional": false,
            "desc": "Path to image (PNG or JPG format)"
          }
        ],
        "return": [
          {
            "name": "w",
            "type": "number",
            "optional": false,
            "desc": "Image width"
          },
          {
            "name": "h",
            "type": "number",
            "optional": false,
            "desc": "Image height"
          }
        ],
        "info": "Get image size",
        "example": "local w,h = UiGetImageSize(\"test.png\")"
      },
      {
        "name": "UiImageBox",
        "def": "UiImageBox(path, width, height, borderWidth, borderHeight)",
        "arguments": [
          {
            "name": "path",
            "type": "string",
            "optional": false,
            "desc": "Path to image (PNG or JPG format)"
          },
          {
            "name": "width",
            "type": "number",
            "optional": false,
            "desc": "Width"
          },
          {
            "name": "height",
            "type": "number",
            "optional": false,
            "desc": "Height"
          },
          {
            "name": "borderWidth",
            "type": "number",
            "optional": false,
            "desc": "Border width"
          },
          {
            "name": "borderHeight",
            "type": "number",
            "optional": false,
            "desc": "Border height"
          }
        ],
        "return": [],
        "info": "Draw 9-slice image at cursor position. Width should be at least 2*borderWidth.\nHeight should be at least 2*borderHeight.",
        "example": "UiImageBox(\"menu-frame.png\", 200, 200, 10, 10)"
      },
      {
        "name": "UiSound",
        "def": "UiSound(path, [volume], [pitch], [pan])",
        "arguments": [
          {
            "name": "path",
            "type": "string",
            "optional": false,
            "desc": "Path to sound file (OGG format)"
          },
          {
            "name": "volume",
            "type": "number",
            "optional": true,
            "desc": "Playback volume. Default 1.0"
          },
          {
            "name": "pitch",
            "type": "number",
            "optional": true,
            "desc": "Playback pitch. Default 1.0"
          },
          {
            "name": "pan",
            "type": "number",
            "optional": true,
            "desc": "Playback stereo panning (-1.0 to 1.0). Default 0.0."
          }
        ],
        "return": [],
        "info": "UI sounds are not affected by acoustics simulation. Use LoadSound / PlaySound for that.",
        "example": "UiSound(\"click.ogg\")"
      },
      {
        "name": "UiSoundLoop",
        "def": "UiSoundLoop(path, [volume])",
        "arguments": [
          {
            "name": "path",
            "type": "string",
            "optional": false,
            "desc": "Path to looping sound file (OGG format)"
          },
          {
            "name": "volume",
            "type": "number",
            "optional": true,
            "desc": "Playback volume. Default 1.0"
          }
        ],
        "return": [],
        "info": "Call this continuously to keep playing loop. \nUI sounds are not affected by acoustics simulation. Use LoadLoop / PlayLoop for that.",
        "example": "if animating then\n\tUiSoundLoop(\"screech.ogg\")\nend"
      },
      {
        "name": "UiMute",
        "def": "UiMute(amount, [music])",
        "arguments": [
          {
            "name": "amount",
            "type": "number",
            "optional": false,
            "desc": "Mute by this amount (0.0 to 1.0)"
          },
          {
            "name": "music",
            "type": "boolean",
            "optional": true,
            "desc": "Mute music as well"
          }
        ],
        "return": [],
        "info": "Mute game audio and optionally music for the next frame. Call\ncontinuously to stay muted.",
        "example": "if menuOpen then\n\tUiMute(1.0)\nend"
      },
      {
        "name": "UiButtonImageBox",
        "def": "UiButtonImageBox(path, borderWidth, borderHeight, [r], [g], [b], [a])",
        "arguments": [
          {
            "name": "path",
            "type": "string",
            "optional": false,
            "desc": "Path to image (PNG or JPG format)"
          },
          {
            "name": "borderWidth",
            "type": "number",
            "optional": false,
            "desc": "Border width"
          },
          {
            "name": "borderHeight",
            "type": "number",
            "optional": false,
            "desc": "Border height"
          },
          {
            "name": "r",
            "type": "number",
            "optional": true,
            "desc": "Red multiply. Default 1.0"
          },
          {
            "name": "g",
            "type": "number",
            "optional": true,
            "desc": "Green multiply. Default 1.0"
          },
          {
            "name": "b",
            "type": "number",
            "optional": true,
            "desc": "Blue multiply. Default 1.0"
          },
          {
            "name": "a",
            "type": "number",
            "optional": true,
            "desc": "Alpha channel. Default 1.0"
          }
        ],
        "return": [],
        "info": "Set up 9-slice image to be used as background for buttons.",
        "example": "UiButtonImageBox(\"button-9slice.png\", 10, 10)\nif UiTextButton(\"Test\") then\n\t...\nend"
      },
      {
        "name": "UiButtonHoverColor",
        "def": "UiButtonHoverColor(r, g, b, [a])",
        "arguments": [
          {
            "name": "r",
            "type": "number",
            "optional": false,
            "desc": "Red multiply"
          },
          {
            "name": "g",
            "type": "number",
            "optional": false,
            "desc": "Green multiply"
          },
          {
            "name": "b",
            "type": "number",
            "optional": false,
            "desc": "Blue multiply"
          },
          {
            "name": "a",
            "type": "number",
            "optional": true,
            "desc": "Alpha channel. Default 1.0"
          }
        ],
        "return": [],
        "info": "Button color filter when hovering mouse pointer.",
        "example": "UiButtonHoverColor(1, 0, 0)\nif UiTextButton(\"Test\") then\n\t...\nend"
      },
      {
        "name": "UiButtonPressColor",
        "def": "UiButtonPressColor(r, g, b, [a])",
        "arguments": [
          {
            "name": "r",
            "type": "number",
            "optional": false,
            "desc": "Red multiply"
          },
          {
            "name": "g",
            "type": "number",
            "optional": false,
            "desc": "Green multiply"
          },
          {
            "name": "b",
            "type": "number",
            "optional": false,
            "desc": "Blue multiply"
          },
          {
            "name": "a",
            "type": "number",
            "optional": true,
            "desc": "Alpha channel. Default 1.0"
          }
        ],
        "return": [],
        "info": "Button color filter when pressing down.",
        "example": "UiButtonPressColor(0, 1, 0)\nif UiTextButton(\"Test\") then\n\t...\nend"
      },
      {
        "name": "UiButtonPressDist",
        "def": "UiButtonPressDist(dist)",
        "arguments": [
          {
            "name": "dist",
            "type": "number",
            "optional": false,
            "desc": "Press distance"
          }
        ],
        "return": [],
        "info": "The button offset when being pressed",
        "example": "UiButtonPressDistance(4)\nif UiTextButton(\"Test\") then\n\t...\nend"
      },
      {
        "name": "UiTextButton",
        "def": "pressed = UiTextButton(text, [w], [h])",
        "arguments": [
          {
            "name": "text",
            "type": "string",
            "optional": false,
            "desc": "Text on button"
          },
          {
            "name": "w",
            "type": "number",
            "optional": true,
            "desc": "Button width"
          },
          {
            "name": "h",
            "type": "number",
            "optional": true,
            "desc": "Button height"
          }
        ],
        "return": [
          {
            "name": "pressed",
            "type": "boolean",
            "optional": false,
            "desc": "True if user clicked button"
          }
        ],
        "info": "No Description",
        "example": "if UiTextButton(\"Test\") then\n\t...\nend"
      },
      {
        "name": "UiImageButton",
        "def": "pressed = UiImageButton(path, [w], [h])",
        "arguments": [
          {
            "name": "path",
            "type": "number",
            "optional": false,
            "desc": "Image path (PNG or JPG file)"
          },
          {
            "name": "w",
            "type": "number",
            "optional": true,
            "desc": "Button width"
          },
          {
            "name": "h",
            "type": "number",
            "optional": true,
            "desc": "Button height"
          }
        ],
        "return": [
          {
            "name": "pressed",
            "type": "boolean",
            "optional": false,
            "desc": "True if user clicked button"
          }
        ],
        "info": "No Description",
        "example": "if UiImageButton(\"image.png\") then\n\t...\nend"
      },
      {
        "name": "UiBlankButton",
        "def": "pressed = UiBlankButton(w, h)",
        "arguments": [
          {
            "name": "w",
            "type": "number",
            "optional": false,
            "desc": "Button width"
          },
          {
            "name": "h",
            "type": "number",
            "optional": false,
            "desc": "Button height"
          }
        ],
        "return": [
          {
            "name": "pressed",
            "type": "boolean",
            "optional": false,
            "desc": "True if user clicked button"
          }
        ],
        "info": "No Description",
        "example": "if UiBlankButton(30, 30) then\n\t...\nend"
      },
      {
        "name": "UiSlider",
        "def": "value, done = UiSlider(path, axis, current, min, max)",
        "arguments": [
          {
            "name": "path",
            "type": "number",
            "optional": false,
            "desc": "Image path (PNG or JPG file)"
          },
          {
            "name": "axis",
            "type": "string",
            "optional": false,
            "desc": "Drag axis, must be \"x\" or \"y\""
          },
          {
            "name": "current",
            "type": "number",
            "optional": false,
            "desc": "Current value"
          },
          {
            "name": "min",
            "type": "number",
            "optional": false,
            "desc": "Minimum value"
          },
          {
            "name": "max",
            "type": "number",
            "optional": false,
            "desc": "Maximum value"
          }
        ],
        "return": [
          {
            "name": "value",
            "type": "number",
            "optional": false,
            "desc": "New value, same as current if not changed"
          },
          {
            "name": "done",
            "type": "boolean",
            "optional": false,
            "desc": "True if user is finished changing (released slider)"
          }
        ],
        "info": "No Description",
        "example": "value = UiSlider(\"dot.png\", \"x\", value, 0, 100)"
      },
      {
        "name": "UiGetScreen",
        "def": "handle = UiGetScreen()",
        "arguments": [],
        "return": [
          {
            "name": "handle",
            "type": "number",
            "optional": false,
            "desc": "Handle to the screen running this script or zero if none."
          }
        ],
        "info": "No Description",
        "example": "--Turn off screen running current script\nscreen = UiGetScreen()\nSetScreenEnabled(screen, false)"
      }
    ]
  }
]